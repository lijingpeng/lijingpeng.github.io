<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Frank]]></title>
  <subtitle><![CDATA[Li Jingpeng's site]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.notehub.cn/"/>
  <updated>2015-12-09T02:38:01.000Z</updated>
  <id>http://www.notehub.cn/</id>
  
  <author>
    <name><![CDATA[Li Jingpeng]]></name>
    <email><![CDATA[me@lijingpeng.org]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python Mock的入门]]></title>
    <link href="http://www.notehub.cn/2015/12/09/dev/python/python_mock/"/>
    <id>http://www.notehub.cn/2015/12/09/dev/python/python_mock/</id>
    <published>2015-12-09T02:19:56.000Z</published>
    <updated>2015-12-09T02:38:01.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Mock是什么">Mock是什么</h3><p>Mock这个词在英语中有模拟的这个意思，因此我们可以猜测出这个库的主要功能是模拟一些东西。准确的说，Mock是Python中一个用于支持的测试的库，它的主要功能是使用mock对象替代掉指定的Python对象，以达到模拟对象的行为。简单的说，mock库用于如下的场景：</p>
<p>假设你开发的项目叫a，里面包含了一个模块b，模块b中的一个函数c（也就是a.b.c）在工作的时候需要调用发送请求给特定的服务器来得到一个JSON返回值，然后根据这个返回值来做处理。如果要为a.b.c函数写一个单元测试，该如何做？<br>一个简单的办法是搭建一个测试的服务器，在单元测试的时候，让a.b.c函数和这个测试服务器交互。但是这种做法有两个问题：</p>
<p>测试服务器可能很不好搭建，或者搭建效率很低。<br>你搭建的测试服务器可能无法返回所有可能的值，或者需要大量的工作才能达到这个目的。<br>那么如何在没有测试服务器的情况下进行上面这种情况的单元测试呢？Mock模块就是答案。上面已经说过了，mock模块可以替换Python对象。我们假设a.b.c的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(url)</span>:</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="comment"># further process with resp</span></span><br></pre></td></tr></table></figure>
<p>如果利用mock模块，那么就可以达到这样的效果：使用一个mock对象替换掉上面的requests.get函数，然后执行函数c时，c调用requests.get的返回值就能够由我们的mock对象来决定，而不需要服务器的参与。简单的说，就是我们用一个mock对象替换掉c函数和服务器交互的过程。你一定很好奇这个功能是如何实现的，这个是mock模块内部的实现机制，不在本文的讨论范围。本文主要讨论如何用mock模块来解决上面提到的这种单元测试场景。</p>
<h3 id="Mock的安装和导入">Mock的安装和导入</h3><p>在Python 3.3以前的版本中，需要另外安装mock模块，可以使用pip命令来安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install mock</span><br></pre></td></tr></table></figure></p>
<p>然后在代码中就可以直接import进来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mock</span><br></pre></td></tr></table></figure></p>
<p>从Python 3.3开始，mock模块已经被合并到标准库中，被命名为unittest.mock，可以直接import进来使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> mock</span><br></pre></td></tr></table></figure></p>
<h3 id="Mock对象">Mock对象</h3><h4 id="基本用法">基本用法</h4><p>Mock对象是mock模块中最重要的概念。Mock对象就是mock模块中的一个类的实例，这个类的实例可以用来替换其他的Python对象，来达到模拟的效果。Mock类的定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mock</span><span class="params">(spec=None, side_effect=None, return_value=DEFAULT, wraps=None, name=None, spec_set=None, **kwargs)</span></span></span><br></pre></td></tr></table></figure></p>
<p>这里给出这个定义只是要说明下Mock对象其实就是个Python类而已，当然，它内部的实现是很巧妙的，有兴趣的可以去看mock模块的代码。</p>
<p>Mock对象的一般用法是这样的：</p>
<p>找到你要替换的对象，这个对象可以是一个类，或者是一个函数，或者是一个类实例。<br>然后实例化Mock类得到一个mock对象，并且设置这个mock对象的行为，比如被调用的时候返回什么值，被访问成员的时候返回什么值等。<br>使用这个mock对象替换掉我们想替换的对象，也就是步骤1中确定的对象。<br>之后就可以开始写测试代码，这个时候我们可以保证我们替换掉的对象在测试用例执行的过程中行为和我们预设的一样。<br>举个例子来说：我们有一个简单的客户端实现，用来访问一个URL，当访问正常时，需要返回状态码200，不正常时，需要返回状态码404。首先，我们的客户端代码实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> r.status_code</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_ustack</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> send_request(<span class="string">'http://www.ustack.com'</span>)</span><br></pre></td></tr></table></figure></p>
<p>外部模块调用visit_ustack()来访问UnitedStack的官网。下面我们使用mock对象在单元测试中分别测试访问正常和访问不正常的情况。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> mock</span><br><span class="line"><span class="keyword">import</span> client</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClient</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_success_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        success_send = mock.Mock(return_value=<span class="string">'200'</span>)</span><br><span class="line">        client.send_request = success_send</span><br><span class="line">        self.assertEqual(client.visit_ustack(), <span class="string">'200'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_fail_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        fail_send = mock.Mock(return_value=<span class="string">'404'</span>)</span><br><span class="line">        client.send_request = fail_send</span><br><span class="line">        self.assertEqual(client.visit_ustack(), <span class="string">'404'</span>)</span><br></pre></td></tr></table></figure></p>
<p>找到要替换的对象：我们需要测试的是visit_ustack这个函数，那么我们需要替换掉send_request这个函数。<br>实例化Mock类得到一个mock对象，并且设置这个mock对象的行为。在成功测试中，我们设置mock对象的返回值为字符串“200”，在失败测试中，我们设置mock对象的返回值为字符串”404”。<br>使用这个mock对象替换掉我们想替换的对象。我们替换掉了client.send_request<br>写测试代码。我们调用client.visit_ustack()，并且期望它的返回值和我们预设的一样。<br>上面这个就是使用mock对象的基本步骤了。在上面的例子中我们替换了自己写的模块的对象，其实也可以替换标准库和第三方模块的对象，方法是一样的：先import进来，然后替换掉指定的对象就可以了。</p>
<h4 id="稍微高级点的用法">稍微高级点的用法</h4><p>class Mock的参数</p>
<p>上面讲的是mock对象最基本的用法。下面来看看mock对象的稍微高级点的用法（并不是很高级啊，最完整最高级的直接去看mock的文档即可，后面给出）。</p>
<p>先来看看Mock这个类的参数，在上面看到的类定义中，我们知道它有好几个参数，这里介绍最主要的几个：</p>
<p>name: 这个是用来命名一个mock对象，只是起到标识作用，当你print一个mock对象的时候，可以看到它的name。<br>return_value: 这个我们刚才使用过了，这个字段可以指定一个值（或者对象），当mock对象被调用时，如果side_effect函数返回的是DEFAULT，则对mock对象的调用会返回return_value指定的值。<br>side_effect: 这个参数指向一个可调用对象，一般就是函数。当mock对象被调用时，如果该函数返回值不是DEFAULT时，那么以该函数的返回值作为mock对象调用的返回值。<br>其他的参数请参考官方文档。</p>
<h4 id="mock对象的自动创建">mock对象的自动创建</h4><p>当访问一个mock对象中不存在的属性时，mock会自动建立一个子mock对象，并且把正在访问的属性指向它，这个功能对于实现多级属性的mock很方便。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client = Client()</span><br><span class="line">client.v2_client.get.return_value = <span class="string">'200'</span></span><br></pre></td></tr></table></figure></p>
<p>这个时候，你就得到了一个mock过的client实例，调用该实例的v2_client.get()方法会得到的返回值是”200”。</p>
<p>从上面的例子中还可以看到，指定mock对象的return_value还可以使用属性赋值的方法。</p>
<h4 id="对方法调用进行检查">对方法调用进行检查</h4><p>mock对象有一些方法可以用来检查该对象是否被调用过、被调用时的参数如何、被调用了几次等。实现这些功能可以调用mock对象的方法，具体的可以查看mock的文档。这里我们举个例子。</p>
<p>还是使用上面的代码，这次我们要检查visit_ustack()函数调用send_request()函数时，传递的参数类型是否正确。我们可以像下面这样使用mock对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClient</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_call_send_request_with_right_arguments</span><span class="params">(self)</span>:</span></span><br><span class="line">        client.send_request = mock.Mock()</span><br><span class="line">        client.visit_ustack()</span><br><span class="line">        self.assertEqual(client.send_request.called, <span class="keyword">True</span>)</span><br><span class="line">        call_args = client.send_request.call_args</span><br><span class="line">        self.assertIsInstance(call_args[<span class="number">0</span>][<span class="number">0</span>], str)</span><br></pre></td></tr></table></figure></p>
<p>Mock对象的called属性表示该mock对象是否被调用过。</p>
<p>Mock对象的call_args表示该mock对象被调用的tuple，tuple的每个成员都是一个mock.call对象。mock.call这个对象代表了一次对mock对象的调用，其内容是一个tuple，含有两个元素，第一个元素是调用mock对象时的位置参数（<em>args），第二个元素是调用mock对象时的关键字参数（*</em>kwargs）。</p>
<p>现在来分析下上面的用例，我们要检查的项目有两个：</p>
<p>visit_ustack()调用了send_request()<br>调用的参数是一个字符串<br>patch和patch.object</p>
<p>在了解了mock对象之后，我们来看两个方便测试的函数：patch和patch.object。这两个函数都会返回一个mock内部的类实例，这个类是class _patch。返回的这个类实例既可以作为函数的装饰器，也可以作为类的装饰器，也可以作为上下文管理器。使用patch或者patch.object的目的是为了控制mock的范围，意思就是在一个函数范围内，或者一个类的范围内，或者with语句的范围内mock掉一个对象。我们看个代码例子即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClient</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_success_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        status_code = <span class="string">'200'</span></span><br><span class="line">        success_send = mock.Mock(return_value=status_code)</span><br><span class="line">        <span class="keyword">with</span> mock.patch(<span class="string">'client.send_request'</span>, success_send):</span><br><span class="line">            <span class="keyword">from</span> client <span class="keyword">import</span> visit_ustack</span><br><span class="line">            self.assertEqual(visit_ustack(), status_code)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_fail_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        status_code = <span class="string">'404'</span></span><br><span class="line">        fail_send = mock.Mock(return_value=status_code)</span><br><span class="line">        <span class="keyword">with</span> mock.patch(<span class="string">'client.send_request'</span>, fail_send):</span><br><span class="line">            <span class="keyword">from</span> client <span class="keyword">import</span> visit_ustack</span><br><span class="line">            self.assertEqual(visit_ustack(), status_code)</span><br></pre></td></tr></table></figure></p>
<p>这个测试类和我们刚才写的第一个测试类一样，包含两个测试，只不过这次不是显示创建一个mock对象并且进行替换，而是使用了patch函数（作为上下文管理器使用）。</p>
<p>patch.object和patch的效果是一样的，只不过用法有点不同。举例来说，同样是上面这个例子，换成patch.object的话是这样的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_fail_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    status_code = <span class="string">'404'</span></span><br><span class="line">    fail_send = mock.Mock(return_value=status_code)</span><br><span class="line">    <span class="keyword">with</span> mock.patch.object(client, <span class="string">'send_request'</span>, fail_send):</span><br><span class="line">        <span class="keyword">from</span> client <span class="keyword">import</span> visit_ustack</span><br><span class="line">        self.assertEqual(visit_ustack(), status_code)</span><br></pre></td></tr></table></figure></p>
<p>就是替换掉一个对象的指定名称的属性，用法和setattr类似。</p>
<h3 id="如何学习使用mock？">如何学习使用mock？</h3><p>你肯定很奇怪，本文不就是教人使用mock的么？其实不是的，我发现自己在学习mock的过程中遇到的主要困难是不清楚mock能做什么，而不是mock对象到底有哪些函数。因此写这篇文章的主要目的是为了说明mock能做什么。</p>
<p>当你知道了mock能做什么之后，要如何学习并掌握mock呢？最好的方式就是查看阅读官方文档，并在自己的单元测试中使用。</p>
<p>最后，学习mock技能你应该要能够感受到一种控制的快感，就是你能享受控制外部服务的快乐。当你感受到这种快感的时候，你的mock应该就达到熟练使用的水平了。</p>
<h3 id="官方文档">官方文档</h3><p>Python 2.7</p>
<p>mock还未加入标准库。</p>
<p><a href="http://www.voidspace.org.uk/python/mock/index.html" target="_blank" rel="external">http://www.voidspace.org.uk/python/mock/index.html</a></p>
<p>Python 3.4</p>
<p>mock已经加入了标准库。</p>
<p><a href="https://docs.python.org/3.4/library/unittest.mock-examples.html" target="_blank" rel="external">https://docs.python.org/3.4/library/unittest.mock-examples.html</a><br><a href="https://docs.python.org/3.4/library/unittest.mock.html" target="_blank" rel="external">https://docs.python.org/3.4/library/unittest.mock.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Mock是什么">Mock是什么</h3><p>Mock这个词在英语中有模拟的这个意思，因此我们可以猜测出这个库的主要功能是模拟一些东西。准确的说，Mock是Python中一个用于支持的测试的库，它的主要功能是使用mock对象替代掉指定的Python对象，以达到模]]>
    </summary>
    
      <category term="Mock" scheme="http://www.notehub.cn/tags/Mock/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MAC elasticsearch]]></title>
    <link href="http://www.notehub.cn/2015/12/08/dev/search/Elasticsearch/"/>
    <id>http://www.notehub.cn/2015/12/08/dev/search/Elasticsearch/</id>
    <published>2015-12-08T02:19:56.000Z</published>
    <updated>2015-12-08T15:23:44.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>Monitor Elasticsearch</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step 1: Install Marvel into Elasticsearch:  </span></span><br><span class="line">bin/plugin install license</span><br><span class="line">bin/plugin install marvel-agent</span><br><span class="line"><span class="comment"># Step 2: Install Marvel into Kibana  </span></span><br><span class="line">bin/kibana plugin --install elasticsearch/marvel/latest</span><br><span class="line"><span class="comment"># Step 3: Start Elasticsearch and Kibana  bin/elasticsearch</span></span><br><span class="line">bin/kibana</span><br><span class="line"><span class="comment"># Step 4: Navigate to http://localhost:5601/app/marvel</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="co]]>
    </summary>
    
      <category term="elasticsearch" scheme="http://www.notehub.cn/tags/elasticsearch/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MAC docker私有镜像安装配置]]></title>
    <link href="http://www.notehub.cn/2015/12/04/dev/docker/docker/"/>
    <id>http://www.notehub.cn/2015/12/04/dev/docker/docker/</id>
    <published>2015-12-04T02:19:56.000Z</published>
    <updated>2015-12-04T15:38:57.000Z</updated>
    <content type="html"><![CDATA[<p>MAC docker私有镜像安装配置：</p>
<ol>
<li>先安装brew install swig</li>
<li><p>在安装docker-registry先安装M2Crypto</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:martinpaljak/M2Crypto.git</span><br><span class="line"><span class="built_in">cd</span> M2Crypto</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装gevent</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo CFLAGS=<span class="string">'-std=c99'</span> pip install gevent==<span class="number">1.0</span>.<span class="number">1</span></span><br><span class="line"><span class="number">4</span>. sudo pip install docker-registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启<br><a href="http://stackoverflow.com/questions/31990757/network-timed-out-while-trying-to-connect-to-https-index-docker-io" target="_blank" rel="external">http://stackoverflow.com/questions/31990757/network-timed-out-while-trying-to-connect-to-https-index-docker-io</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I had the same problem this morning and the following fixed it <span class="keyword">for</span> me:</span><br><span class="line"></span><br><span class="line">$ docker-machine restart default      <span class="comment"># Restart the environment</span></span><br><span class="line">$ <span class="built_in">eval</span> $(docker-machine env default)  <span class="comment"># Refresh your environment settings</span></span><br><span class="line">It appears that this is due to the Docker virtual machine getting itself into a strange state.</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>MAC docker私有镜像安装配置：</p>
<ol>
<li>先安装brew install swig</li>
<li><p>在安装docker-registry先安装M2Crypto</p>
<figure class="highlight bash"><table]]>
    </summary>
    
      <category term="docker" scheme="http://www.notehub.cn/tags/docker/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lucene 布尔查询的使用]]></title>
    <link href="http://www.notehub.cn/2015/11/26/dev/lucene_boolean_query/"/>
    <id>http://www.notehub.cn/2015/11/26/dev/lucene_boolean_query/</id>
    <published>2015-11-26T12:53:56.000Z</published>
    <updated>2015-11-26T12:54:18.000Z</updated>
    <content type="html"><![CDATA[<p>各种查询<br>方式一：使用QueryParser与查询语法。（会使用分词器）</p>
<p>MultiFieldQueryParser<br>查询字符串 ————————&gt; Query对象</p>
<p>例如：<br>上海 AND 天气<br>上海 OR 天气<br>上海新闻 AND site:news.163.com<br>…</p>
<p>方式二：<br>直接创建Query的实例（子类的），不会使用分词器<br>new TermQuery(..);<br>new BooleanQuery(..);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.i_query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.Term;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.FuzzyQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.MatchAllDocsQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.NumericRangeQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.TermQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.WildcardQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.BooleanClause.Occur;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast._domain.Article;</span><br><span class="line"><span class="keyword">import</span> cn.itcast._util.ArticleDocumentUtils;</span><br><span class="line"><span class="keyword">import</span> cn.itcast._util.LuceneUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键词查询</span></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTermQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的查询字符串为：title:lucene</span></span><br><span class="line">        TermQuery query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"title"</span>, <span class="string">"lucene"</span>));</span><br><span class="line">        searchAndShowResult(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通配符查询</span></span><br><span class="line">    <span class="comment">// ? 表示一个任意字符</span></span><br><span class="line">    <span class="comment">// * 表示0或多个任意字符</span></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWildcardQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的查询字符串为：title:lu*n?</span></span><br><span class="line">        <span class="comment">// WildcardQuery query = new WildcardQuery(new Term("title", "lu*n?"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：content:互?网</span></span><br><span class="line">        WildcardQuery query = <span class="keyword">new</span> WildcardQuery(<span class="keyword">new</span> Term(<span class="string">"content"</span>, <span class="string">"互?网"</span>));</span><br><span class="line">        searchAndShowResult(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMatchAllDocsQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的查询字符串为：*:*</span></span><br><span class="line">        MatchAllDocsQuery query = <span class="keyword">new</span> MatchAllDocsQuery();</span><br><span class="line">        searchAndShowResult(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模糊查询</span></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFuzzyQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的查询字符串为：title:lucenX~0.9</span></span><br><span class="line">        <span class="comment">// 第二个参数是最小相似度，表示有多少正确的就显示出来，比如0.9表示有90%正确的字符就会显示出来。</span></span><br><span class="line">        FuzzyQuery query = <span class="keyword">new</span> FuzzyQuery(<span class="keyword">new</span> Term(<span class="string">"title"</span>, <span class="string">"lucenX"</span>), <span class="number">0.8F</span>);</span><br><span class="line">        searchAndShowResult(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 范围查询</span></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNumericRangeQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对应的查询字符串为：id:[5 TO 15]</span></span><br><span class="line">        <span class="comment">// NumericRangeQuery query = NumericRangeQuery.newIntRange("id", 5, 15, true, true);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：id:&#123;5 TO 15&#125;</span></span><br><span class="line">        <span class="comment">// NumericRangeQuery query = NumericRangeQuery.newIntRange("id", 5, 15, false, false);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：id:[5 TO 15&#125;</span></span><br><span class="line">        NumericRangeQuery query = NumericRangeQuery.newIntRange(<span class="string">"id"</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        searchAndShowResult(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 布尔查询</span></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBooleanQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BooleanQuery booleanQuery = <span class="keyword">new</span> BooleanQuery();</span><br><span class="line">        <span class="comment">// booleanQuery.add(query, Occur.MUST); // 必须满足</span></span><br><span class="line">        <span class="comment">// booleanQuery.add(query, Occur.SHOULD); // 多个SHOULD一起用表示OR的关系</span></span><br><span class="line">        <span class="comment">// booleanQuery.add(query, Occur.MUST_NOT); // 非</span></span><br><span class="line"></span><br><span class="line">        Query query1 = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"title"</span>, <span class="string">"lucene"</span>));</span><br><span class="line">        Query query2 = NumericRangeQuery.newIntRange(<span class="string">"id"</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 对应的查询字符串为：+title:lucene +id:&#123;5 TO 15]</span></span><br><span class="line">        <span class="comment">// // 对应的查询字符串为（大写的AND）：title:lucene AND id:&#123;5 TO 15]</span></span><br><span class="line">        <span class="comment">// booleanQuery.add(query1, Occur.MUST);</span></span><br><span class="line">        <span class="comment">// booleanQuery.add(query2, Occur.MUST);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：title:lucene id:&#123;5 TO 15]</span></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：title:lucene OR id:&#123;5 TO 15]</span></span><br><span class="line">        <span class="comment">// booleanQuery.add(query1, Occur.SHOULD);</span></span><br><span class="line">        <span class="comment">// booleanQuery.add(query2, Occur.SHOULD);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：+title:lucene -id:&#123;5 TO 15]</span></span><br><span class="line">        <span class="comment">// 对应的查询字符串为：title:lucene (NOT id:&#123;5 TO 15] )</span></span><br><span class="line">        booleanQuery.add(query1, Occur.MUST);</span><br><span class="line">        booleanQuery.add(query2, Occur.MUST_NOT);</span><br><span class="line"></span><br><span class="line">        searchAndShowResult(booleanQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 测试搜索的工具方法</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> query</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchAndShowResult</span><span class="params">(Query query)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// // 准备查询条件</span></span><br><span class="line">            <span class="comment">// String queryString = "content:lucene";</span></span><br><span class="line">            <span class="comment">// // 1，把查询字符串转为Query对象（从title和content中查询）</span></span><br><span class="line">            <span class="comment">// QueryParser queryParser = new MultiFieldQueryParser(Version.LUCENE_30, new String[] &#123; "title", "content" &#125;, LuceneUtils.getAnalyzer());</span></span><br><span class="line">            <span class="comment">// Query query = queryParser.parse(queryString);</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"---&gt;  // 对应的查询字符串为："</span> + query + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2，执行查询，得到中间结果</span></span><br><span class="line">            IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(LuceneUtils.getDirectory()); <span class="comment">// 指定所用的索引库</span></span><br><span class="line">            TopDocs topDocs = indexSearcher.search(query, <span class="number">100</span>); <span class="comment">// 最多返回前n条结果</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3，处理结果</span></span><br><span class="line">            List&lt;Article&gt; list = <span class="keyword">new</span> ArrayList&lt;Article&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; topDocs.scoreDocs.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 根据编号拿到Document数据</span></span><br><span class="line">                <span class="keyword">int</span> docId = topDocs.scoreDocs[i].doc; <span class="comment">// Document的内部编号</span></span><br><span class="line">                Document doc = indexSearcher.doc(docId);</span><br><span class="line">                <span class="comment">// 把Document转为Article</span></span><br><span class="line">                Article article = ArticleDocumentUtils.documentToArticle(doc);</span><br><span class="line">                list.add(article);</span><br><span class="line">            &#125;</span><br><span class="line">            indexSearcher.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 显示结果</span></span><br><span class="line">            System.out.println(<span class="string">"总结果数："</span> + list.size());</span><br><span class="line">            <span class="keyword">for</span> (Article a : list) &#123;</span><br><span class="line">                System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">                System.out.println(<span class="string">"id = "</span> + a.getId());</span><br><span class="line">                System.out.println(<span class="string">"title = "</span> + a.getTitle());</span><br><span class="line">                System.out.println(<span class="string">"content = "</span> + a.getContent());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>From: <a href="http://www.cnblogs.com/friends-wf/p/3796721.html" target="_blank" rel="external">http://www.cnblogs.com/friends-wf/p/3796721.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>各种查询<br>方式一：使用QueryParser与查询语法。（会使用分词器）</p>
<p>MultiFieldQueryParser<br>查询字符串 ————————&gt; Query对象</p>
<p>例如：<br>上海 AND 天气<br>上海 OR 天气<br]]>
    </summary>
    
      <category term="lucene" scheme="http://www.notehub.cn/tags/lucene/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go语言如何深度拷贝对象]]></title>
    <link href="http://www.notehub.cn/2015/11/25/dev/go/go_deep_copy/"/>
    <id>http://www.notehub.cn/2015/11/25/dev/go/go_deep_copy/</id>
    <published>2015-11-25T02:30:56.000Z</published>
    <updated>2015-11-25T02:39:11.000Z</updated>
    <content type="html"><![CDATA[<p>深度复制可以基于reflect包的反射机制完成, 但是全部重头手写的话会很繁琐.</p>
<p>最简单的方式是基于序列化和反序列化来实现对象的深度复制:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/gob"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> deepCopy(dst, src <span class="keyword">interface</span>&#123;&#125;) error &#123;</span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    <span class="keyword">if</span> err := gob.NewEncoder(&amp;buf).Encode(src); err != <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gob.NewDecoder(bytes.NewBuffer(buf.Bytes())).Decode(dst)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Gob和bytes.Buffer简单组合就搞定了. 当然, Gob的底层也是基于reflect包完成的.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>深度复制可以基于reflect包的反射机制完成, 但是全部重头手写的话会很繁琐.</p>
<p>最简单的方式是基于序列化和反序列化来实现对象的深度复制:<br><figure class="highlight go"><table><tr><td class="gutter]]>
    </summary>
    
      <category term="go" scheme="http://www.notehub.cn/tags/go/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go语言实现set]]></title>
    <link href="http://www.notehub.cn/2015/11/24/dev/go/go_set/"/>
    <id>http://www.notehub.cn/2015/11/24/dev/go/go_set/</id>
    <published>2015-11-24T09:19:56.000Z</published>
    <updated>2015-11-24T09:22:23.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> set</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">interface</span> &#123;</span><br><span class="line">    Add(e <span class="keyword">interface</span>&#123;&#125;) <span class="typename">bool</span></span><br><span class="line">    Remove(e <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">    Clear()</span><br><span class="line">    Contains(e <span class="keyword">interface</span>&#123;&#125;) <span class="typename">bool</span></span><br><span class="line">    Len() <span class="typename">int</span></span><br><span class="line">    Same(other Set) <span class="typename">bool</span></span><br><span class="line">    Elements() []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    String() <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断集合 one 是否是集合 other 的超集</span></span><br><span class="line"><span class="keyword">func</span> IsSuperset(one Set, other Set) <span class="typename">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> one == <span class="constant">nil</span> || other == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    oneLen := one.Len()</span><br><span class="line">    otherLen := other.Len()</span><br><span class="line">    <span class="keyword">if</span> oneLen == <span class="number">0</span> || oneLen == otherLen &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> oneLen &gt; <span class="number">0</span> &amp;&amp; otherLen == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> other.Elements() &#123;</span><br><span class="line">        <span class="keyword">if</span> !one.Contains(v) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成集合 one 和集合 other 的并集</span></span><br><span class="line"><span class="keyword">func</span> Union(one Set, other Set) Set &#123;</span><br><span class="line">    <span class="keyword">if</span> one == <span class="constant">nil</span> || other == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    unionedSet := NewSimpleSet()</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> one.Elements() &#123;</span><br><span class="line">        unionedSet.Add(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> other.Len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unionedSet</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> other.Elements() &#123;</span><br><span class="line">        unionedSet.Add(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionedSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成集合 one 和集合 other 的交集</span></span><br><span class="line"><span class="keyword">func</span> Intersect(one Set, other Set) Set &#123;</span><br><span class="line">    <span class="keyword">if</span> one == <span class="constant">nil</span> || other == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    intersectedSet := NewSimpleSet()</span><br><span class="line">    <span class="keyword">if</span> other.Len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> intersectedSet</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> one.Len() &lt; other.Len() &#123;</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> one.Elements() &#123;</span><br><span class="line">            <span class="keyword">if</span> other.Contains(v) &#123;</span><br><span class="line">                intersectedSet.Add(v)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> other.Elements() &#123;</span><br><span class="line">            <span class="keyword">if</span> one.Contains(v) &#123;</span><br><span class="line">                intersectedSet.Add(v)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectedSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成集合 one 对集合 other 的差集</span></span><br><span class="line"><span class="keyword">func</span> Difference(one Set, other Set) Set &#123;</span><br><span class="line">    <span class="keyword">if</span> one == <span class="constant">nil</span> || other == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    differencedSet := NewSimpleSet()</span><br><span class="line">    <span class="keyword">if</span> other.Len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> one.Elements() &#123;</span><br><span class="line">            differencedSet.Add(v)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> differencedSet</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> one.Elements() &#123;</span><br><span class="line">        <span class="keyword">if</span> !other.Contains(v) &#123;</span><br><span class="line">            differencedSet.Add(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> differencedSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成集合 one 和集合 other 的对称差集</span></span><br><span class="line"><span class="keyword">func</span> SymmetricDifference(one Set, other Set) Set &#123;</span><br><span class="line">    <span class="keyword">if</span> one == <span class="constant">nil</span> || other == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    diffA := Difference(one, other)</span><br><span class="line">    <span class="keyword">if</span> other.Len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> diffA</span><br><span class="line">    &#125;</span><br><span class="line">    diffB := Difference(other, one)</span><br><span class="line">    <span class="keyword">return</span> Union(diffA, diffB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> NewSimpleSet() Set &#123;</span><br><span class="line">    <span class="keyword">return</span> NewHashSet()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> IsSet(value <span class="keyword">interface</span>&#123;&#125;) <span class="typename">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := value.(Set); ok &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HashSet：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> set</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HashSet <span class="keyword">struct</span> &#123;</span><br><span class="line">    m <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="typename">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> NewHashSet() *HashSet &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;HashSet&#123;m: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="typename">bool</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Add(e <span class="keyword">interface</span>&#123;&#125;) <span class="typename">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !set.m[e] &#123;</span><br><span class="line">        set.m[e] = <span class="constant">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Remove(e <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">delete</span>(set.m, e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Clear() &#123;</span><br><span class="line">    set.m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="typename">bool</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Contains(e <span class="keyword">interface</span>&#123;&#125;) <span class="typename">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> set.m[e]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Len() <span class="typename">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(set.m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Same(other Set) <span class="typename">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> other == <span class="constant">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> set.Len() != other.Len() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> key := <span class="keyword">range</span> set.m &#123;</span><br><span class="line">        <span class="keyword">if</span> !other.Contains(key) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) Elements() []<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    initialLen := <span class="built_in">len</span>(set.m)</span><br><span class="line">    snapshot := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, initialLen)</span><br><span class="line">    actualLen := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key := <span class="keyword">range</span> set.m &#123;</span><br><span class="line">        <span class="keyword">if</span> actualLen &lt; initialLen &#123;</span><br><span class="line">            snapshot[actualLen] = key</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            snapshot = <span class="built_in">append</span>(snapshot, key)</span><br><span class="line">        &#125;</span><br><span class="line">        actualLen++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> actualLen &lt; initialLen &#123;</span><br><span class="line">        snapshot = snapshot[:actualLen]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> snapshot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (set *HashSet) String() <span class="typename">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    buf.WriteString(<span class="string">"HashSet&#123;"</span>)</span><br><span class="line">    first := <span class="constant">true</span></span><br><span class="line">    <span class="keyword">for</span> key := <span class="keyword">range</span> set.m &#123;</span><br><span class="line">        <span class="keyword">if</span> first &#123;</span><br><span class="line">            first = <span class="constant">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buf.WriteString(<span class="string">" "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        buf.WriteString(fmt.Sprintf(<span class="string">"%v"</span>, key))</span><br><span class="line">    &#125;</span><br><span class="line">    buf.WriteString(<span class="string">"&#125;"</span>)</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="l]]>
    </summary>
    
      <category term="go" scheme="http://www.notehub.cn/tags/go/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go可变长参数函数]]></title>
    <link href="http://www.notehub.cn/2015/11/24/dev/go/go_dynamic_args/"/>
    <id>http://www.notehub.cn/2015/11/24/dev/go/go_dynamic_args/</id>
    <published>2015-11-24T06:19:56.000Z</published>
    <updated>2015-11-24T08:22:34.000Z</updated>
    <content type="html"><![CDATA[<p>支持可变长参数列表的函数可以支持任意个传入参数，比如fmt.Println函数就是一个支持可变长参数列表的函数。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数可以传入任意数量的整型参数</span></span><br><span class="line"><span class="keyword">func</span> sum(nums ...<span class="typename">int</span>) &#123;</span><br><span class="line">    fmt.Print(nums, <span class="string">" "</span>)</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持可变长参数的函数调用方法和普通函数一样</span></span><br><span class="line">    <span class="comment">// 也支持只有一个参数的情况</span></span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果你需要传入的参数在一个切片中，像下面一样</span></span><br><span class="line">    <span class="comment">// "func(slice...)"把切片打散传入</span></span><br><span class="line">    nums := []<span class="typename">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sum(nums...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果为</p>
<p>[1 2] 3<br>[1 2 3] 6<br>[1 2 3 4] 10<br>需要注意的是，可变长参数应该是函数定义的最右边的参数，即最后一个参数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>支持可变长参数列表的函数可以支持任意个传入参数，比如fmt.Println函数就是一个支持可变长参数列表的函数。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="]]>
    </summary>
    
      <category term="go" scheme="http://www.notehub.cn/tags/go/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang语言中map的初始化及使用]]></title>
    <link href="http://www.notehub.cn/2015/11/24/dev/go/go_map/"/>
    <id>http://www.notehub.cn/2015/11/24/dev/go/go_map/</id>
    <published>2015-11-24T06:19:56.000Z</published>
    <updated>2015-11-24T08:25:08.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先声明map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span></span><br><span class="line"><span class="comment">// 再使用make函数创建一个非nil的map，nil map不能赋值</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>)</span><br><span class="line"><span class="comment">// 最后给已声明的map赋值</span></span><br><span class="line">m1[<span class="string">"a"</span>] = <span class="string">"aa"</span></span><br><span class="line">m1[<span class="string">"b"</span>] = <span class="string">"bb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接创建</span></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>)</span><br><span class="line"><span class="comment">// 然后赋值</span></span><br><span class="line">m2[<span class="string">"a"</span>] = <span class="string">"aa"</span></span><br><span class="line">m2[<span class="string">"b"</span>] = <span class="string">"bb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 + 赋值一体化</span></span><br><span class="line">m3 := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>&#123;</span><br><span class="line">    <span class="string">"a"</span>: <span class="string">"aa"</span>,</span><br><span class="line">    <span class="string">"b"</span>: <span class="string">"bb"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==========================================</span></span><br><span class="line"><span class="comment">// 查找键值是否存在</span></span><br><span class="line"><span class="keyword">if</span> v, ok := m1[<span class="string">"a"</span>]; ok &#123;</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Key Not Found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历map</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="l]]>
    </summary>
    
      <category term="go" scheme="http://www.notehub.cn/tags/go/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Golang中使用json]]></title>
    <link href="http://www.notehub.cn/2015/11/21/dev/go/go_json/"/>
    <id>http://www.notehub.cn/2015/11/21/dev/go/go_json/</id>
    <published>2015-11-21T07:19:56.000Z</published>
    <updated>2015-11-21T07:28:17.000Z</updated>
    <content type="html"><![CDATA[<p>包引用<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"github.com/bitly/go-simplejson"</span> <span class="comment">// for json get</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>用于存放数据的结构体<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyData <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name   <span class="typename">string</span>    <span class="string">`json:"item"`</span></span><br><span class="line">    Other  <span class="typename">float32</span>   <span class="string">`json:"amount"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要注意的就是后面单引号中的内容。</p>
<p><code>json:&quot;item&quot;</code><br>这个的作用，就是Name字段在从结构体实例编码到JSON数据格式的时候，使用item作为名字。算是一种重命名的方式吧。</p>
<p>编码JSON<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> detail MyData</span><br><span class="line"></span><br><span class="line">detail.Name  = <span class="string">"1"</span></span><br><span class="line">detail.Other = <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line">body, err := json.Marshal(detail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们使用Golang自带的encoding/json包对结构体进行编码到JSON数据。</p>
<p>json.Marshal(…)<br>JSON解码<br>由于Golang自带的json包处理解码的过程较为复杂，所以这里使用一个第三方的包simplejson进行json数据的解码操作。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">js, err := simplejson.NewJson(body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(js)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>包引用<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><spa]]>
    </summary>
    
      <category term="go" scheme="http://www.notehub.cn/tags/go/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go中的make和new]]></title>
    <link href="http://www.notehub.cn/2015/11/21/dev/go/go_make_new/"/>
    <id>http://www.notehub.cn/2015/11/21/dev/go/go_make_new/</id>
    <published>2015-11-21T06:19:56.000Z</published>
    <updated>2015-11-21T06:52:31.000Z</updated>
    <content type="html"><![CDATA[<p>1、make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。</p>
<p>2、new本质上说跟其它语言中的同名函数功能一样：new(T)分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型T的零值。有一点非常重要：new返回指针。</p>
<p>3、make(T, args)与new(T)有着不同的功能，make只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型（引用），而不是*T。</p>
<p>4、本质来讲，导致这三个内建类型有所不同的原因是：引用在使用前必须被初始化。例如，一个slice，是一个包含指向数据（内部array）的指针、长度和容量的三项描述符；在这些项目被初始化之前，slice为nil。对于slice、map和channel来说，make初始化了内部的数据结构，填充适当的值。make返回初始化后的（非零）值。</p>
<p>5、故make 是内建类型初始化的方法，例如：s :=make([]int,len,cap)  //这个切片在元素在超过10个时，底层将会发生至少一次的内存移动动作<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个初始元素个数为5的数组切片，元素初始值为0，并预留10个元素的存储空间  </span></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="typename">int</span>, <span class="number">5</span>, <span class="number">10</span>) <span class="comment">// len(b)=5, cap(b)=10  </span></span><br><span class="line"><span class="comment">//继续切片，注意len和cap的变化  </span></span><br><span class="line">b = b[:<span class="built_in">cap</span>(b)] <span class="comment">// len(b)=5, cap(b)=5  </span></span><br><span class="line">b = b[<span class="number">1</span>:]      <span class="comment">// len(b)=4, cap(b)=4</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1、make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。</p>
<p>2、new本质上说跟其它语言中的同名函数功能一样：new(T)分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。用Go的术语说，它返]]>
    </summary>
    
      <category term="go" scheme="http://www.notehub.cn/tags/go/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FlatBuffers使用简介]]></title>
    <link href="http://www.notehub.cn/2015/11/20/dev/flatbuffers/"/>
    <id>http://www.notehub.cn/2015/11/20/dev/flatbuffers/</id>
    <published>2015-11-20T02:01:56.000Z</published>
    <updated>2015-11-20T02:06:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><hr>
<p>Google在今年6月份发布了跨平台序列化工具FlatBuffers，提供了C++/Java/Go/C#接口支持，这是一个注重性能和资源使用的序列化类库。相较于Protocol Buffers，其更适用于移动设备，FlatBuffers提供更高的性能以及更低的资源需求。</p>
<p>特点</p>
<ul>
<li>不需要打包/解包。它的结构化数据都以二进制形式保存，不需要数据解析过程，数据也可以方便传递</li>
<li>省内存、性能好</li>
<li>强类型系统，在编译阶段就能预防一些bug的产生</li>
<li>跨平台（C++11/Java/Go/C#）</li>
</ul>
<h3 id="FlatBuffers和Protocol_Buffers以及Json的比较：">FlatBuffers和Protocol Buffers以及Json的比较：</h3><ul>
<li>FlatBuffers的功能和Protocol Buffers很像，他们的最大不同点是在使用具体的数据之前，FlatBuffers不需要解析/解包的过程。同时，在工程中使用时，FlatBuffers的引用比Protocol Buffers方便很多，只需要包含两三个头文件即可</li>
<li>JSON作为数据交换格式，被广泛用户各种动态语言之间（当然也包括静态语言）。它的优点是易于理解（可读性好），同时它的最大的缺点那就是解析时的性能问题了。而且因为它的动态类型特点，你的代码可能还需要多写好多类型、数据检查逻辑。</li>
</ul>
<h3 id="FlatBuffers的使用步骤">FlatBuffers的使用步骤</h3><p>编写一个用来定义数据结构的schema(IDL，接口定义)文件，如下所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//flatbuffers test struct&#10;&#10;namespace Jason.Flat.Test;&#10;&#10;enum Color : byte &#123; Red = 1, Green, Blue &#125;&#10;&#10;union Any &#123; TextureData, Texture &#125;&#10;&#10;table TestAppend &#123;&#10;    test_num:int;&#10;    test_num2:int;&#10;&#125;&#10;&#10;table TextureData &#123;&#10;    image_size:int (id:0);&#10;    image_data:[ubyte] (id:1);&#10;    image_test:short(id:3);&#10;    test_num2:int(id:2);&#10;&#125;&#10;&#10;table Texture &#123;&#10;    num_textures:short;&#10;    textures:[TextureData];&#10;    num_test:short = 30;&#10;    num_test1:short (deprecated);&#10;        num_test2:short;&#10;    test_append:TestAppend;&#10;&#125;&#10;&#10;root_type Texture;</span><br></pre></td></tr></table></figure>
<p>将上述代码保存为TestFlat.fbs文件之后，即可用flatc来编译了</p>
<ul>
<li><p>使用FlatBuffer编译器flatc生成数据结构源代码（C++头文件或者Java类）<br>登录GitHub，下载所需版本的源码及工程文件，在build目录下有VS2010的工程文件（当然，你也可以选择利用CMake自己本地创建工程），打开配置好flatc工程的传入参数，如下：<br>-c -o ./ ./TestFlat.fbs<br>运行flatc工程，即可在当前工程目录下生成TestFlat_generated.h头文件，这个头文件中包含了我们所需的所有结构体、枚举类型等以及相应的存取方法和验证方法</p>
</li>
<li><p>使用FlatBufferBuilder类创建flat的二进制buffer<br>以下代码展示了如何利用FlatBufferBuilder创建相应buffer：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//read serialized buffer</span></span><br><span class="line">flatbuffers::FlatBufferBuilder builder_data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> test_append = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">auto</span> name_test = builder_data.CreateString(<span class="string">"TestAppend"</span>);</span><br><span class="line"><span class="keyword">auto</span> testApp = CreateTestAppend(builder_data, test_append, test_append);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> image_size = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> inv_data[] = &#123; <span class="number">11</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">5</span> ,<span class="number">7</span>, <span class="number">10</span>, <span class="number">39</span>, <span class="number">45</span>, <span class="number">23</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> name = builder_data.CreateString(<span class="string">"TextureData"</span>);</span><br><span class="line"><span class="keyword">auto</span> image_data = builder_data.CreateVector(inv_data, image_size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> image_test = <span class="number">900</span>;</span><br><span class="line"><span class="keyword">auto</span> texture_data = CreateTextureData(builder_data, image_size, image_data, image_test, image_test);</span><br><span class="line"></span><br><span class="line"><span class="comment">//flatbuffers::FlatBufferBuilder builder_tex;</span></span><br><span class="line"><span class="keyword">int</span> texture_num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> name_tex = builder_data.CreateString(<span class="string">"Texture"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;flatbuffers::Offset&lt;TextureData&gt;&gt; tex_vec;</span><br><span class="line">tex_vec.push_back(texture_data);</span><br><span class="line"><span class="keyword">auto</span> tex_data = builder_data.CreateVector(tex_vec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num_text = <span class="number">100</span>, num_text2 = <span class="number">200</span>, num_text3 = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">auto</span> texture = CreateTexture(builder_data, texture_num, tex_data, num_text, num_text2, testApp);</span><br><span class="line">builder_data.Finish(texture);</span><br></pre></td></tr></table></figure>
<p>要使上述正确运行，除了引用C++基本库之外，需在文件头部添加以下代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"flatbuffers/flatbuffers.h"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"idl.h"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"util.h"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"TestFlat_generated.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Jason::Flat::Test;</span><br></pre></td></tr></table></figure>
<p>上述代码的编写中规中矩，其中CreateString和CreateVector都是FlatBufferBuilder类的成员函数，分别用于创建适用于FlatBuffer内存结构的字符串数据以及向量数据。其余的方法，如CreateTextureData、CreateTexture均是由flatc根据IDL文件（TestFlat.fbs）自动生成的头文件中用于创建相应结构体的函数。最后一句builder_data.Finish(texture)用于优化对齐写入builder_data的内存结构。</p>
<ul>
<li>保存buffer到本地或者直接通过网络发送<br>保存buffer到本地的代码，如下：</li>
</ul>
<p>std::cout &lt;&lt; builder_data.GetSize() &lt;&lt; std::endl;<br>flatbuffers::SaveFile(“texture.bin”, reinterpret_cast<char *="">(builder_data.GetBufferPointer()), builder_data.GetSize(), true);<br>将数据保存到名为texture.bin的二进制文件中，其中通过builder_data.GetBufferPointer()获取内存指针，builder_data.GetSize()获取内存大小，最后一个参数用于制定是否生成二进制文件。</char></p>
<ul>
<li>接收并buffer并读取数据内容<br>读取二进制文件的代码如下：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> binaryfile;</span><br><span class="line"><span class="keyword">bool</span> ok = flatbuffers::LoadFile(<span class="string">"texture.bin"</span>, <span class="literal">false</span>, &amp;binaryfile);</span><br><span class="line"></span><br><span class="line">flatbuffers::<span class="function">Verifier <span class="title">tex_verify</span><span class="params">(builderOut.GetBufferPointer()</span>, builderOut.<span class="title">GetSize</span><span class="params">()</span>)</span>;</span><br><span class="line"><span class="keyword">bool</span> verify_flag = VerifyTextureBuffer(tex_verify);</span><br><span class="line"></span><br><span class="line">flatbuffers::FlatBufferBuilder builderOut;</span><br><span class="line">TextureBuilder* texBuilder = <span class="keyword">new</span> TextureBuilder(builderOut);</span><br><span class="line">builderOut.PushBytes(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;(<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(binaryfile.c_str())), binaryfile.size());</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; builderOut.GetSize() &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> model = GetTexture(builderOut.GetBufferPointer());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> outNum = model-&gt;num_textures();</span><br><span class="line"><span class="keyword">const</span> flatbuffers::Vector&lt;flatbuffers::Offset&lt;TextureData&gt;&gt;* outTex = model-&gt;textures();</span><br><span class="line">TextureData* outTexData = (TextureData *)outTex-&gt;Get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> outSize = outTexData-&gt;image_size();</span><br><span class="line"><span class="keyword">const</span> flatbuffers::Vector&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;* outData = outTexData-&gt;image_data();</span><br><span class="line"><span class="keyword">int</span> x = outData-&gt;Get(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> len = outData-&gt;Length();</span><br><span class="line"><span class="keyword">delete</span> texBuilder;</span><br></pre></td></tr></table></figure>
<p>上述代码中VerifyTextureBuffer用于验证读取的内存是否为FlatBuffers的内存块，是则返回true，不是则返回false。通过GetTexture获取指针之后，结构体中的变量均可以通过相应方法（各方法名请查看自动生成的头文件）获取。</p>
<h3 id="总结">总结</h3><p>利用FlatBuffers来进行数据保存及传输的优点显而易见，它利用自身特殊的编码格式，能一定程度上减少内存的占用，优化读取的性能。更重要的是，对于数据结构的向前向后兼容提供了很好的扩展性，方便又高效：</p>
<ul>
<li>要想让数据结构具有可扩展性，需将数据结构定义为table，它是数据扩展的基础，FlatBuffers中的struct类型不支持扩展</li>
<li>如果想在后续的版本中删除数据结构中的某些字段，只要在将要删除的字段后面添加(deprecated)即可，当然需要保证删除的字段在之前版本的程序中不会引起程序崩溃（该删掉的字段在上一版本的程序中获取到的会是个空指针或空值，只需保证程序在获取到空值或空指针之后不会出现异常即可）</li>
<li>如果想在后续版本中向数据结构中添加某些字段，需添加到table中最后一个字段的后面，若是想table中随意位置添加字段，需如上面TextureData 的定义，给每个字段指明添加id:n（n从0开始）<br>目前FlatBuffers还不是很完善，碰到问题可以到FlatBuffers Issues Tracker去提交或则寻找答案。</li>
</ul>
<p>From: <a href="http://www.jianshu.com/p/6eb04a149cd8" target="_blank" rel="external">http://www.jianshu.com/p/6eb04a149cd8</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><hr>
<p>Google在今年6月份发布了跨平台序列化工具FlatBuffers，提供了C++/Java/Go/C#接口支持，这是一个注重性能和资源使用的序列化类库。相较于Protocol Buffers，其更适用于移动设备，FlatBu]]>
    </summary>
    
      <category term="FlatBuffers" scheme="http://www.notehub.cn/tags/FlatBuffers/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于前端]]></title>
    <link href="http://www.notehub.cn/2015/11/18/dev/web/ui_base/"/>
    <id>http://www.notehub.cn/2015/11/18/dev/web/ui_base/</id>
    <published>2015-11-18T05:20:56.000Z</published>
    <updated>2015-11-18T06:01:26.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>Autocomplete<br><a href="http://jqueryui.com/autocomplete" target="_blank" rel="external">http://jqueryui.com/autocomplete</a> 支持中文有问题</li>
<li>jsTree<br><a href="https://www.jstree.com/plugins/" target="_blank" rel="external">https://www.jstree.com/plugins/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>Autocomplete<br><a href="http://jqueryui.com/autocomplete" target="_blank" rel="external">http://jqueryui.com/autocomplete</a> 支持中文]]>
    </summary>
    
      <category term="前端" scheme="http://www.notehub.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="web" scheme="http://www.notehub.cn/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python CGI-BIN]]></title>
    <link href="http://www.notehub.cn/2015/11/18/dev/web/python_cgi_bin/"/>
    <id>http://www.notehub.cn/2015/11/18/dev/web/python_cgi_bin/</id>
    <published>2015-11-18T05:19:56.000Z</published>
    <updated>2015-11-18T06:06:30.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseHTTPServer</span><br><span class="line"><span class="keyword">import</span> CGIHTTPServer</span><br><span class="line"><span class="keyword">import</span> cgitb; cgitb.enable()  <span class="comment">## This line enables CGI error reporting</span></span><br><span class="line"></span><br><span class="line">server = BaseHTTPServer.HTTPServer</span><br><span class="line">handler = CGIHTTPServer.CGIHTTPRequestHandler</span><br><span class="line">server_address = (<span class="string">"0.0.0.0"</span>, <span class="number">8082</span>)</span><br><span class="line">handler.cgi_directories = [<span class="string">"/cgi-bin"</span>]</span><br><span class="line"></span><br><span class="line">httpd = server(server_address, handler)</span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<p>CGI-BIN下的py文件要有执行权限。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line">query_str = form.getvalue(<span class="string">'query'</span>)</span><br><span class="line">query = <span class="string">"http://0.0.0.0:9999/query?query=%s"</span> % query_str</span><br><span class="line"></span><br><span class="line">exec_query = urllib.urlopen(query)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Status: 200 OK"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-Type: application/json"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">print</span> exec_query.read()</span><br></pre></td></tr></table></figure>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>test<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"></span><br><span class="line">            $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">            </span>&#123;</span><br><span class="line">                $(<span class="string">'#clickme'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    alert(<span class="string">'Im going to start processing'</span>);</span><br><span class="line"></span><br><span class="line">                    $.ajax(&#123;</span><br><span class="line">                        url: <span class="string">"/scripts/ajaxpost.py"</span>,</span><br><span class="line">                        type: <span class="string">"post"</span>,</span><br><span class="line">                        datatype:<span class="string">"json"</span>,</span><br><span class="line">                        data: &#123;<span class="string">'key'</span>:<span class="string">'value'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;,</span><br><span class="line">                        success: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                            alert(response.message);</span><br><span class="line">                            alert(response.keys);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"clickme"</span>&gt;</span> click me <span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>参考： </p>
<ul>
<li><a href="https://pointlessprogramming.wordpress.com/2011/02/13/python-cgi-tutorial-2/" target="_blank" rel="external">https://pointlessprogramming.wordpress.com/2011/02/13/python-cgi-tutorial-2/</a></li>
<li><a href="http://www.runoob.com/python/python-cgi.html" target="_blank" rel="external">http://www.runoob.com/python/python-cgi.html</a></li>
<li><a href="http://stackoverflow.com/questions/10721244/ajax-posting-to-python-cgi" target="_blank" rel="external">http://stackoverflow.com/questions/10721244/ajax-posting-to-python-cgi</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span clas]]>
    </summary>
    
      <category term="python" scheme="http://www.notehub.cn/tags/python/"/>
    
      <category term="web" scheme="http://www.notehub.cn/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python HTTP server]]></title>
    <link href="http://www.notehub.cn/2015/11/18/dev/web/python_http_server/"/>
    <id>http://www.notehub.cn/2015/11/18/dev/web/python_http_server/</id>
    <published>2015-11-18T05:19:56.000Z</published>
    <updated>2015-11-18T06:04:19.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>HTTP GET</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> BaseHTTPRequestHandler</span><br><span class="line"><span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        parsed_path = urlparse.urlparse(self.path)</span><br><span class="line">        message_parts = [</span><br><span class="line">                <span class="string">'CLIENT VALUES:'</span>,</span><br><span class="line">                <span class="string">'client_address=%s (%s)'</span> % (self.client_address,</span><br><span class="line">                                            self.address_string()),</span><br><span class="line">                <span class="string">'command=%s'</span> % self.command,</span><br><span class="line">                <span class="string">'path=%s'</span> % self.path,</span><br><span class="line">                <span class="string">'real path=%s'</span> % parsed_path.path,</span><br><span class="line">                <span class="string">'query=%s'</span> % parsed_path.query,</span><br><span class="line">                <span class="string">'request_version=%s'</span> % self.request_version,</span><br><span class="line">                <span class="string">''</span>,</span><br><span class="line">                <span class="string">'SERVER VALUES:'</span>,</span><br><span class="line">                <span class="string">'server_version=%s'</span> % self.server_version,</span><br><span class="line">                <span class="string">'sys_version=%s'</span> % self.sys_version,</span><br><span class="line">                <span class="string">'protocol_version=%s'</span> % self.protocol_version,</span><br><span class="line">                <span class="string">''</span>,</span><br><span class="line">                <span class="string">'HEADERS RECEIVED:'</span>,</span><br><span class="line">                ]</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> sorted(self.headers.items()):</span><br><span class="line">            message_parts.append(<span class="string">'%s=%s'</span> % (name, value.rstrip()))</span><br><span class="line">        message_parts.append(<span class="string">''</span>)</span><br><span class="line">        message = <span class="string">'\r\n'</span>.join(message_parts)</span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(message)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer</span><br><span class="line">    server = HTTPServer((<span class="string">'localhost'</span>, <span class="number">8080</span>), GetHandler)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Starting server, use &lt;Ctrl-C&gt; to stop'</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTTP POST</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> BaseHTTPRequestHandler</span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Parse the form data posted</span></span><br><span class="line">        form = cgi.FieldStorage(</span><br><span class="line">            fp=self.rfile, </span><br><span class="line">            headers=self.headers,</span><br><span class="line">            environ=&#123;<span class="string">'REQUEST_METHOD'</span>:<span class="string">'POST'</span>,</span><br><span class="line">                     <span class="string">'CONTENT_TYPE'</span>:self.headers[<span class="string">'Content-Type'</span>],</span><br><span class="line">                     &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Begin the response</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(<span class="string">'Client: %s\n'</span> % str(self.client_address))</span><br><span class="line">        self.wfile.write(<span class="string">'User-agent: %s\n'</span> % str(self.headers[<span class="string">'user-agent'</span>]))</span><br><span class="line">        self.wfile.write(<span class="string">'Path: %s\n'</span> % self.path)</span><br><span class="line">        self.wfile.write(<span class="string">'Form data:\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Echo back information about what was posted in the form</span></span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> form.keys():</span><br><span class="line">            field_item = form[field]</span><br><span class="line">            <span class="keyword">if</span> field_item.filename:</span><br><span class="line">                <span class="comment"># The field contains an uploaded file</span></span><br><span class="line">                file_data = field_item.file.read()</span><br><span class="line">                file_len = len(file_data)</span><br><span class="line">                <span class="keyword">del</span> file_data</span><br><span class="line">                self.wfile.write(<span class="string">'\tUploaded %s as "%s" (%d bytes)\n'</span> % \</span><br><span class="line">                        (field, field_item.filename, file_len))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># Regular form value</span></span><br><span class="line">                self.wfile.write(<span class="string">'\t%s=%s\n'</span> % (field, form[field].value))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer</span><br><span class="line">    server = HTTPServer((<span class="string">'localhost'</span>, <span class="number">8080</span>), PostHandler)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Starting server, use &lt;Ctrl-C&gt; to stop'</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Threading and Forking</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> SocketServer <span class="keyword">import</span> ThreadingMixIn</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        message =  threading.currentThread().getName()</span><br><span class="line">        self.wfile.write(message)</span><br><span class="line">        self.wfile.write(<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedHTTPServer</span><span class="params">(ThreadingMixIn, HTTPServer)</span>:</span></span><br><span class="line">    <span class="string">"""Handle requests in a separate thread."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = ThreadedHTTPServer((<span class="string">'localhost'</span>, <span class="number">8080</span>), Handler)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Starting server, use &lt;Ctrl-C&gt; to stop'</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>From: <a href="https://pymotw.com/2/BaseHTTPServer/" target="_blank" rel="external">https://pymotw.com/2/BaseHTTPServer/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>HTTP GET</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="lin]]>
    </summary>
    
      <category term="python" scheme="http://www.notehub.cn/tags/python/"/>
    
      <category term="web" scheme="http://www.notehub.cn/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ string实现加减乘除]]></title>
    <link href="http://www.notehub.cn/2015/11/15/dev/CPP/cpp_big_number/"/>
    <id>http://www.notehub.cn/2015/11/15/dev/CPP/cpp_big_number/</id>
    <published>2015-11-15T12:19:56.000Z</published>
    <updated>2015-11-15T14:24:15.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//compare比较函数：相等返回0，大于返回1，小于返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str1.length()&gt;str2.length()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str1.length()&lt;str2.length())  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> str1.compare(str2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高精度加法</span></span><br><span class="line"><span class="comment">//只能是两个正数相加</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2)</span><span class="comment">//高精度加法</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len1=str1.length();</span><br><span class="line">    <span class="keyword">int</span> len2=str2.length();</span><br><span class="line">    <span class="comment">//前面补0，弄成长度相同</span></span><br><span class="line">    <span class="keyword">if</span>(len1&lt;len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len2-len1;i++)</span><br><span class="line">           str1=<span class="string">"0"</span>+str1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len1-len2;i++)</span><br><span class="line">           str2=<span class="string">"0"</span>+str2;</span><br><span class="line">    &#125;</span><br><span class="line">    len1=str1.length();</span><br><span class="line">    <span class="keyword">int</span> cf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len1-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=str1[i]-<span class="string">'0'</span>+str2[i]-<span class="string">'0'</span>+cf;</span><br><span class="line">        cf=temp/<span class="number">10</span>;</span><br><span class="line">        temp%=<span class="number">10</span>;</span><br><span class="line">        str=<span class="keyword">char</span>(temp+<span class="string">'0'</span>)+str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cf!=<span class="number">0</span>)  str=<span class="keyword">char</span>(cf+<span class="string">'0'</span>)+str;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高精度减法</span></span><br><span class="line"><span class="comment">//只能是两个正数相减，而且要大减小</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">sub</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2)</span><span class="comment">//高精度减法</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> tmp=str1.length()-str2.length();</span><br><span class="line">    <span class="keyword">int</span> cf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=str2.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[tmp+i]&lt;str2[i]+cf)</span><br><span class="line">        &#123;</span><br><span class="line">            str=<span class="keyword">char</span>(str1[tmp+i]-str2[i]-cf+<span class="string">'0'</span>+<span class="number">10</span>)+str;</span><br><span class="line">            cf=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str=<span class="keyword">char</span>(str1[tmp+i]-str2[i]-cf+<span class="string">'0'</span>)+str;</span><br><span class="line">            cf=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tmp-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i]-cf&gt;=<span class="string">'0'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str=<span class="keyword">char</span>(str1[i]-cf)+str;</span><br><span class="line">            cf=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str=<span class="keyword">char</span>(str1[i]-cf+<span class="number">10</span>)+str;</span><br><span class="line">            cf=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str.erase(<span class="number">0</span>,str.find_first_not_of(<span class="string">'0'</span>));<span class="comment">//去除结果中多余的前导0</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高精度乘法</span></span><br><span class="line"><span class="comment">//只能是两个正数相乘</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">mul</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> len1=str1.length();</span><br><span class="line">    <span class="keyword">int</span> len2=str2.length();</span><br><span class="line">    <span class="built_in">string</span> tempstr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len2-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        tempstr=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> temp=str2[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cf=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len2-<span class="number">1</span>-i;j++)</span><br><span class="line">              tempstr+=<span class="string">"0"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=len1-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                t=(temp*(str1[j]-<span class="string">'0'</span>)+cf)%<span class="number">10</span>;</span><br><span class="line">                cf=(temp*(str1[j]-<span class="string">'0'</span>)+cf)/<span class="number">10</span>;</span><br><span class="line">                tempstr=<span class="keyword">char</span>(t+<span class="string">'0'</span>)+tempstr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cf!=<span class="number">0</span>) tempstr=<span class="keyword">char</span>(cf+<span class="string">'0'</span>)+tempstr;</span><br><span class="line">        &#125;</span><br><span class="line">        str=add(str,tempstr);</span><br><span class="line">    &#125;</span><br><span class="line">    str.erase(<span class="number">0</span>,str.find_first_not_of(<span class="string">'0'</span>));</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高精度除法</span></span><br><span class="line"><span class="comment">//两个正数相除，商为quotient,余数为residue</span></span><br><span class="line"><span class="comment">//需要高精度减法和乘法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2,<span class="built_in">string</span> &amp;quotient,<span class="built_in">string</span> &amp;residue)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    quotient=residue=<span class="string">""</span>;<span class="comment">//清空</span></span><br><span class="line">    <span class="keyword">if</span>(str2==<span class="string">"0"</span>)<span class="comment">//判断除数是否为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        quotient=residue=<span class="string">"ERROR"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str1==<span class="string">"0"</span>)<span class="comment">//判断被除数是否为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        quotient=residue=<span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=compare(str1,str2);</span><br><span class="line">    <span class="keyword">if</span>(res&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        quotient=<span class="string">"0"</span>;</span><br><span class="line">        residue=str1;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        quotient=<span class="string">"1"</span>;</span><br><span class="line">        residue=<span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len1=str1.length();</span><br><span class="line">        <span class="keyword">int</span> len2=str2.length();</span><br><span class="line">        <span class="built_in">string</span> tempstr;</span><br><span class="line">        tempstr.append(str1,<span class="number">0</span>,len2-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len2-<span class="number">1</span>;i&lt;len1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tempstr=tempstr+str1[i];</span><br><span class="line">            tempstr.erase(<span class="number">0</span>,tempstr.find_first_not_of(<span class="string">'0'</span>));</span><br><span class="line">            <span class="keyword">if</span>(tempstr.empty())</span><br><span class="line">              tempstr=<span class="string">"0"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> ch=<span class="string">'9'</span>;ch&gt;=<span class="string">'0'</span>;ch--)<span class="comment">//试商</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> str,tmp;</span><br><span class="line">                str=str+ch;</span><br><span class="line">                tmp=mul(str2,str);</span><br><span class="line">                <span class="keyword">if</span>(compare(tmp,tempstr)&lt;=<span class="number">0</span>)<span class="comment">//试商成功</span></span><br><span class="line">                &#123;</span><br><span class="line">                    quotient=quotient+ch;</span><br><span class="line">                    tempstr=sub(tempstr,tmp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        residue=tempstr;</span><br><span class="line">    &#125;</span><br><span class="line">    quotient.erase(<span class="number">0</span>,quotient.find_first_not_of(<span class="string">'0'</span>));</span><br><span class="line">    <span class="keyword">if</span>(quotient.empty()) quotient=<span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">     <span class="built_in">string</span> str1,str2;</span><br><span class="line">     <span class="built_in">string</span> str3,str4;</span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;add(str1,str2)&lt;&lt;endl;</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;sub(str1,str2)&lt;&lt;endl;</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;mul(str1,str2)&lt;&lt;endl;</span><br><span class="line">         div(str1,str2,str3,str4);</span><br><span class="line">         <span class="built_in">cout</span>&lt;&lt;str3&lt;&lt;<span class="string">"  "</span>&lt;&lt;str4&lt;&lt;endl;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>From: <a href="http://www.cnblogs.com/kuangbin/archive/2012/08/11/2634044.html" target="_blank" rel="external">http://www.cnblogs.com/kuangbin/archive/2012/08/11/2634044.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="]]>
    </summary>
    
      <category term="c++" scheme="http://www.notehub.cn/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跳过视频广告好爽，殊不知被狠狠地「算计」了]]></title>
    <link href="http://www.notehub.cn/2015/10/29/ads/skip_the_ad/"/>
    <id>http://www.notehub.cn/2015/10/29/ads/skip_the_ad/</id>
    <published>2015-10-29T03:36:46.000Z</published>
    <updated>2015-10-29T03:36:46.000Z</updated>
    <content type="html"><![CDATA[<p>YouTube 视频的广告为什么可以跳过？对广告商的负面影响大吗？</p>
<p>许多人都从用户角度讲，Youtube 的这种方式用户体验多么多么好，作为相关从业人员，我觉得你们真是太看得起资本家了。Google 请了这么多这么贵的码农来开发这种产品，广告主愿意用这种方式投放广告，一定都是真心为了钱的……</p>
<p>就从这句话开始说吧。</p>
<p>如果不是一看就特有趣的广告，我都会选择跳过……这无疑是广告商最不愿看到的情景吧。美国的广告行业有一句著名的话是「我在广告上的投资有一半是被浪费了的，但是问题是我不知道是哪一半。」</p>
<p>所以才有了广告测量这个子行业。</p>
<p>从互联网视频这个分支来讲，一般的广告效果追踪主要靠网站播放器的 impression callback。简单说来就是说你在看视频广告的时候，播放器会不断向服务器端汇报你的观看进展的。同时视频网站也是依照这个数据找广告主收钱的，也就是著名的 CPM（千次观看成本）模型。 </p>
<p>问题在于：播放器实际上只能汇报「播放进展」，而不是「观看进展」。</p>
<p>这也是为什么在视频广告行业还有所谓的「First in Pod」的概念的原因，因为广告商也不傻，他们也知道一场足球比赛，中场休息放广告的时候，你们一定去上厕所开啤酒叫烤串儿去了。所以只有进广告后第一个广告可能被更多人看到，因此这种广告往往比中间的卖得要贵得多。</p>
<p>因此 Youtube 的这种可以跳过的广告（ 正式名字叫做 TrueView），其实不是给你一个跳过广告的机会，而是让他们获得一个与你互动的机会。如果说真的是为了用户体验，那么他们就应该在广告的第一秒就直接允许你跳过广告。</p>
<p>因为你知道 5 秒之后就能马上进入视频，所以这 5 秒你一定会盯着屏幕，甚至把鼠标预先挪到那个倒数框里。 </p>
<p>这算是 TrueView 的第一个优点：精准测量，保证你真的在看。</p>
<p>至于能不能吸引你继续看下去，那就是广告制作公司的本事了。</p>
<p>而你说你跳过广告是广告商不愿意看到的事情，其实真不是，广告商乐坏了，因为他们不用付钱向一个对他们的产品不感兴趣的人推销了。这就好比著名的浏览器插件 AdBlock Plus， 广告商对它几乎都是持欢迎态度的，因为会用这个插件的用户，往往都是获取难度较高的客户，你把它们的广告屏蔽了，他们也省得为一个无谓的展示付钱。而且相反，因为给予了观看者跳过的权利，如果这条广告最后居然播完了，那么很大可能是你是对这个广告的内容感兴趣的，换句话说，是广告主的潜在客户。 </p>
<p>所以这是 TrueView 的第二个优点：精准投放。</p>
<p>最后，我们才说到用户体验，如果说良好的用户体验实际上是 TrueView 的副产物的话，那么这个副产物也不是完全没有价值的，因为广告的性质其实大体可以分两类：</p>
<p>一类是 Selling，例如网上小视频里弹出一个广告说，现在来买大众汽车，分期免利息，还有折扣，blabla</p>
<p>一类是 Branding，就好比几年前超级碗决赛上大众汽车做的无厘头的星战系列宣传片，不卖产品，就告诉你我高大上买得起超级碗的广告</p>
<p>越是大公司大品牌，可能在 Branding 上花的钱就越多，但同时他们对于广告投放的体验要求也就更高，因为这个广告创意要传递给你的一定是关于他们品牌的正面印象，所以说这种广告往往是大手笔的投入，例如宝马找 Clive Owen 拍的一系列小电影。这种情况下，如果你的网站用户体验非常差，那么在你这里投放只能是浪费广告商的创意花费了。</p>
<p>因此，TrueView 的第三个优点是：保证了良好的用户体验，因而可以吸引更大的客户来进行投放。</p>
<p>因为有了上述三个优点，以及对大客户友好的特性，TrueView 的广告本身就具有了对于Youtube 盈利来说特别有利的特质：</p>
<ul>
<li>CPM 高， 能吸引更有钱的金主，适应更多不同的广告需求</li>
<li>广告创意自由度更大， 其中第三点我是见过实例的，曾经我看过一个长达十分钟的 TrueView 广告，本身就是一个小电影，因为制作的精良，我不但看完了，而且还特地去搜索单独播放的地址。如果不是 TrueView，一个十分钟的广告简直是不可接受的。</li>
</ul>
<p>综上所述，我觉得 TrueView 是一个非常精妙的设计。基本上在「广告是视频网站盈利的根基」这一前提下，倚靠提供精准的投放和良好的体验，做到了广告主、网站和用户的三赢。 </p>
<p>当然，我认为 Youtube 依托 Google，对于互联网用户的兴趣爱好甚至年龄性别特征都有非常多的了解， 因而能够智能地选取广告内容，一定程度上保证 TrueView 观看率的，才有信心敢推出这类型的产品。</p>
<p>那说回来，为什么国内视频网站为什么不能也这样做？我猜是可以。但是：</p>
<ul>
<li>国内用户被盗版滋养了那么多年，对于免费产品 + 第三方补偿的接受能力比较弱</li>
<li>国内的视频网站在用户追踪和人群分析上做得不够成熟，不能够保证投放出去的广告一定是用户感兴趣的</li>
</ul>
<p>最终导致使用类似的模式不能保证收益，倒不如用垃圾广告直接强奸用户广种薄收了……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>YouTube 视频的广告为什么可以跳过？对广告商的负面影响大吗？</p>
<p>许多人都从用户角度讲，Youtube 的这种方式用户体验多么多么好，作为相关从业人员，我觉得你们真是太看得起资本家了。Google 请了这么多这么贵的码农来开发这种产品，广告主愿意用这种方式投]]>
    </summary>
    
      <category term="ads" scheme="http://www.notehub.cn/categories/ads/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Granger causality]]></title>
    <link href="http://www.notehub.cn/2015/10/28/algo/granger_causality/"/>
    <id>http://www.notehub.cn/2015/10/28/algo/granger_causality/</id>
    <published>2015-10-28T02:23:16.000Z</published>
    <updated>2015-10-28T02:23:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Granger_causality">Granger causality</h3><hr>
<p>如果一个变量X无助于预测另一个变量Y，则说X不是Y的原因；相反，若X是Y的原因，则必须满足两个条件：第一，X应该有助于预测Y，即在Y关于Y的过去值的回归中，添加X的过去值作为独立变量应当显著地增加回归的解释能力；第二，Y不应当有助于预测X，其原因是，如果X有助于预测Y，Y也有助于预测X，则很可能存在一个或几个其他变量，它们既是引起X变化的原因，也是引起Y变化的原因。</p>
<h3 id="Granger因果关系检验">Granger因果关系检验</h3><hr>
<p><img src="/images/gc1.png" alt=""><br><img src="/images/gc2.png" alt=""><br><img src="/images/gc3.png" alt=""></p>
<h3 id="关于鸡生蛋还是蛋生鸡">关于鸡生蛋还是蛋生鸡</h3><hr>
<p>鸡生蛋还是蛋生鸡？对于原因与结果的区分，自古以来是个难题。1926年，挪威经济学家、第一届（1969年）诺贝尔经济学奖得主弗瑞希（R . Frisch）仿照“生物计量学”（Biometrics）一词提出了“计量经济学”或“经济计量学”（Econometrics）之名。有趣的是，两位经济学家Walter N. Thurman和Mark E. Fisher又将计量经济学的方法用于讨论生物学领域的问题（当然也可以算是经济问题，因为研究结果发表杂经济学杂志上），探讨了这个“鸡与蛋”的关系问题。见“Chicken，eggs，and causality，or which came first?”, American Journal of Agricultural Economics, pp237-238, May 1988”。</p>
<p>他们用1930-1983期间美国鸡蛋产量和美国同期鸡产量的时间序列数据，建立滞后回归模型（1-4年），然后做格兰杰因果关系检验。结果能够拒绝鸡蛋不是鸡出现原因的原假设，同时不能拒绝鸡不是鸡蛋出现的原因的原假设（只有在检验出单向因果关系后，检验才是有效的）。也就是是说鸡生蛋的假设被拒绝，而蛋生鸡的假设成立，因此，蛋为因，鸡为果。因此，他们得出先有蛋的结论。他们建议作其他诸如“最后笑者笑得最好”（He who laughs last laughs best）、“骄傲是失败之母”（Pride goeth before destruction, and an haughty spirit before a fall）之类的格兰杰因果检验。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(lmtest) </span><br><span class="line"></span><br><span class="line">data(ChickEgg)</span><br><span class="line">grangertest(egg ~ chicken, order = <span class="number">4</span>, data = ChickEgg)</span><br><span class="line">grangertest(chicken ~ egg, order = <span class="number">4</span>, data = ChickEgg)</span><br></pre></td></tr></table></figure>
<p>结果:<br>Granger causality test<br>Model 1: egg ~ Lags(egg, 1:4) + Lags(chicken, 1:4)<br>Model 2: egg ~ Lags(egg, 1:4)<br>  Res.Df Df      F Pr(&gt;F)<br>1     41<br>2     45 -4 0.3929 0.8125<br>我们的假设是『鸡不是蛋的原因』， egg ~ Lags(egg, 1:4) + Lags(chicken, 1:4)， 拒绝该假设犯错的概率是0.8125， 因此我们不可以拒绝该假设， 也就是『鸡不是蛋的原因』成立</p>
<p>Granger causality test<br>Model 1: chicken ~ Lags(chicken, 1:4) + Lags(egg, 1:4)<br>Model 2: chicken ~ Lags(chicken, 1:4)<br>  Res.Df Df      F   Pr(&gt;F)<br>1     41<br>2     45 -4 4.2568 0.005671 **</p>
<p>我们的假设是『蛋不是鸡的原因』， chicken ~ Lags(chicken, 1:4) + Lags(egg, 1:4)， 拒绝该假设犯错的概率是0.005671， 因此我们可以拒绝该假设， 也就是蛋-&gt;鸡是成立的</p>
<p>他们所使用的分析变量之间的因果的办法，即格兰杰因果关系检验。该检验方法为2003年诺贝尔经济学奖得主克莱夫·格兰杰（Clive W. J. Granger）所开创。从统计的角度，因果关系是通过概率或者分布函数的角度体现出来的：在宇宙中所有其它事件的发生情况固定不变的条件下，如果一个事件A的发生与不发生对于另一个事件B的发生的概率（如果通过事件定义了随机变量那么也可以说分布函数）有影响，并且这两个事件在时间上又先后顺序（A前B后），那么我们便可以说A是B的原因。Granger从预测的角度给出了因果性的一个定义：如果x有助于预测(解释)y，则x是y的Granger原因。将x的信息从信息集中去除不会改变对y的最优预测,则x不是y的granger原因。相反，会改变预测，则x是y的Granger原因，即将过去的x包含在信息集中可提高对y的预测。格兰杰因果检验只是数据上的因果关系不代表实际的因果关系。</p>
<p>格兰杰因果关系检验的基本思路是，在两个变量x和y的系统中，若y的现在值用x和y的过去值预测要好于单独用y预测，那么，称x是y的原因；若用x的现在值和x、y的过去值去预测y比只用x和y去预测要好，那么，称x是y的瞬时原因。反之反是。换言之，如果x的变化引起y的变化，则x的变化应当发生在y的变化之前。特别地，说“x是引起y变化的原因”，则必须满足两个条件：一是x应该有助于预测y，即在y关于y的过去值的回归分析中，添加x的过去值作为独立变量应当显著地增加回归的解释能力；二是y不应当有助于预测x，其原因是如果x有助于预测y，y也有助于预测x，则很可能存在一个或几个其它的变量，它们既是引起x变化的原因，也是引起y变化的原因。</p>
<p>进行格兰杰因果关系检验的一个前提条件是时间序列必须具有平稳性，否则可能会出现虚假回归问题。因此在进行格兰杰因果关系检验之前首先应对各指标时间序列的平稳性进行单位根检验(unit  root  test)。常用增广的迪基—富勒检验(ADF检验)来分别对各指标序列的平稳性进行单位根检验。格兰杰检验的特点决定了它只能适用于时间序列数据模型的因果性检验，无法检验只有横截面数据时变量间的因果性。因此，在使用这种方法时，务必检查前提条件，使其尽量能够满足。</p>
<p>时间序列的稳定性是指时间序列的方差、协方差、均值不受时间t的影响。平稳性就是要求经由样本时间序列所得到的拟合曲线在未来的一段期间内仍能顺着现有的形态“惯性”地延续下去；如果数据非平稳，则说明样本拟合曲线的形态不具有“惯性”延续的特点，也就是基于未来将要获得的样本时间序列所拟合出来的曲线将迥异于当前的样本拟合曲线。</p>
<p>由于格兰杰天才地利用了条件概率来定义因果关系，所以他的方法显得既实用又有效，这是个令许多人甚至哲学家都佩服的思维上的突破。但是格兰杰因果关系检验的结论只是统计意义上的因果性，而不一定是真正的因果关系。虽然可以作为真正的因果关系的一种支持，但不能作为肯定或否定因果关系的最终根据。也许，鸡和蛋之间没有必要讨论谁先谁后的问题，因为在足够长的时间里，不存在单向的因果关系，或者说只是存在互为因果关系。运用统计工具来解释经济变量之间的关系，仍有很多的漏洞，存在很多逻辑上的问题。“鸡生蛋还是蛋生鸡”的命题告诉我们，在许多情况下，探讨因果关系是没有意义的。</p>
<p>真正的因果关系，还是要立足于理论模型的思考。统计方法并非万能的，评判一个对象，往往需要多种角度的观察。正所谓“兼听则明，偏听则暗”。诚然真相永远只有一个，但是也要靠科学的探索方法。当然，我们也不能因噎废食，全盘否定计量统计的意义。即使格兰杰因果关系不等于实际因果关系，也并不妨碍其参考价值。因为统计意义上的因果关系也是有意义的，对于经济预测等仍然能起很大的作用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Granger_causality">Granger causality</h3><hr>
<p>如果一个变量X无助于预测另一个变量Y，则说X不是Y的原因；相反，若X是Y的原因，则必须满足两个条件：第一，X应该有助于预测Y，即在Y关于Y的过去值的回归中，添加X的过]]>
    </summary>
    
      <category term="Granger causality" scheme="http://www.notehub.cn/tags/Granger-causality/"/>
    
      <category term="machine learning" scheme="http://www.notehub.cn/categories/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++智能指针(Smart Pointer)]]></title>
    <link href="http://www.notehub.cn/2015/10/27/dev/CPP/cpp_smart_pointer/"/>
    <id>http://www.notehub.cn/2015/10/27/dev/CPP/cpp_smart_pointer/</id>
    <published>2015-10-27T12:47:00.000Z</published>
    <updated>2015-10-27T12:57:13.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_传统指针存在的问题">1. 传统指针存在的问题</h3><hr>
<p>传统指针存在诸多的问题，比如指针所指向的对象的生命周期问题，挂起引用(dangling references)，以及内存泄露(memory leaks). 如下是一个传统指针的使用过程<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *iPtr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// manipulate the memory block</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">delete</span>[] iPtr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上代码将正常运行且内存将被合理释放，但是使用指针常会发生一些意想不到的事情，比如访问一个非法的内存单元，除0操作，以及根据一些判断条件处理的返回return 语句。</p>
<h3 id="2-_什么是智能指针(Smart_Pointer)">2. 什么是智能指针(Smart Pointer)</h3><hr>
<p>智能指针是RAII（Resource Acquisition is initialization）用来动态的分配内存。它提供了普通指针的所有接口外加少数异常处理。在构造阶段，它将分配内存，而在非其作用域内将自动释放所占有的内存。 </p>
<p>在C++98中，使用 auto_ptr来解决上述问题。</p>
<h4 id="2-1_auto_ptr">2.1 auto_ptr</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(<span class="keyword">int</span> a = <span class="number">0</span>) : m_a(a) &#123;&#125;</span><br><span class="line">    ~Test() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling destructor"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt; p(<span class="keyword">new</span> Test(<span class="number">5</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;m_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果： </p>
<p><img src="/images/cpp/sp1.jpg" alt=""></p>
<p>上述代码将智能的释放相关的内存。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(<span class="keyword">int</span> a = <span class="number">0</span>) : m_a(a) &#123;&#125;</span><br><span class="line">    ~Test() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling destructor"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">5</span>, c;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"Invalid divisor"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c = b / a;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">auto_ptr</span>&lt;Test&gt; p(<span class="keyword">new</span> Test(<span class="number">5</span>));</span><br><span class="line">        Fun();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(...) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Something has gone wrong"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，即使异常抛出，指针照样被正常释放。这是因为当异常抛出时，栈松绑(stack unwinding)。 当所有属于try block的本地对象被销毁时，指针p不在作用域中而被释放。</p>
<h5 id="问题1-">问题1.</h5><p>至少从目前来说auto_ptr是智能的。但是它有一个非常本质的缺点：auto_ptr会传递它本身的ownership当其被赋值给另一个auto_ptr对象。正如下述程序所示，一个auto_ptr对象传递给函数Fun()中的auto_ptr对象时，其ownership,或者说是smartness将不再返回给原auto_ptr所指向的p。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(<span class="keyword">int</span> a = <span class="number">0</span>) : m_a(a) &#123;&#125;</span><br><span class="line">    ~Test() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling destructor"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">(<span class="built_in">auto_ptr</span>&lt;Test&gt; p1)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p1-&gt;m_a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Fun() end"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt; p(<span class="keyword">new</span> Test(<span class="number">5</span>));</span><br><span class="line">    Fun(p);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;m_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果： </p>
<p><img src="/images/cpp/sp2.jpg" alt=""></p>
<p>以上程序将crash因为存在野指针auto_ptr。上述代码奔溃的主要原因是，原先的p占有对其自身分配内存的管理权。然而通过Fun()函数将其管理权转给p1，此时因为p1的smartness，在其结束时将释放其所指向的内存块。而此时原先的p将再拥有任何内存，而导致在访问时出现了空指针，野指针的引用问题。</p>
<h5 id="问题2-">问题2.</h5><p>auto_ptr不能使用于数组对象。 这里的意思是不能使用于操作符new[]。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt; p(<span class="keyword">new</span> Test[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述代码将runtime error。因为对于auto_ptr而言，其调用的是delete而非delete []。</p>
<h5 id="问题3-">问题3.</h5><p>auto_ptr不能使用于一些标准的容器库。比如vector，list，map等等。</p>
<p>C++11提出了新型的智能指针，并且都赋予了其相应的意图。</p>
<h4 id="2-2_shared_ptr">2.2 shared_ptr</h4><p>creation :<br>shared_ptr设计的目的很简单：多个共享指针可以指向同一个对象，而当最后一个共享指针在作用域范围内结束时，内存才会被自动的释放。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// share_ptr 常规的创建过程</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr1( <span class="keyword">new</span> <span class="keyword">int</span> );</span><br><span class="line">    <span class="comment">// 使用make_shared 来加速创建过程</span></span><br><span class="line">    <span class="comment">// shared_ptr 自动分配内存，并且保证引用计数</span></span><br><span class="line">    <span class="comment">// 而make_shared则是按照这种方法来初始化</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr2 = make_shared&lt;<span class="keyword">int</span>&gt;( <span class="number">100</span> );</span><br><span class="line">    <span class="comment">// 可以通过use_count() 来查看引用计数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sptr2 referenced count: "</span> &lt;&lt; sptr2.use_count() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr3 = sptr2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sptr2 referenced count: "</span> &lt;&lt; sptr2.use_count() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"*sptr2 = "</span> &lt;&lt; *sptr2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/cpp/sp3.jpg" alt=""></p>
<p>上述代码创建了一个shared_ptr指针指向了一个装着整型值且值为100的内存块，并且引用计数为1,。当其他共享指针通过sptr1来创建时，引用计数将为2。这种引用称为强引用strong reference。除此之外，还有弱引用weak reference。可以通过</p>
<p>destruction ：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(<span class="keyword">int</span> a = <span class="number">0</span>) : m_a(a) &#123;&#125;</span><br><span class="line">    ~Test() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling destructor"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果用以下形式，则只会调用delete，则不会调用</span></span><br><span class="line">    <span class="comment">// delete[ ]; 此时只会调用一次析构函数</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;Test&gt; sptr1(<span class="keyword">new</span> Test[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采用以下形式，lambda表达式，显示调用</span></span><br><span class="line">    <span class="comment">// delete[] 来删除所有的对象。</span></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;Test&gt; sptr2(<span class="keyword">new</span> Test[<span class="number">5</span>],</span><br><span class="line">                           [](Test* p) &#123;<span class="keyword">delete</span>[] p;&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用户可以显式的调用函数，lambda表达式，函数对象来调用对于shared_ptr为数组对象的析构函数delete[]。</p>
<h5 id="Interface（接口）">Interface（接口）</h5><p>shared_ptr提供解引用*， 以及-&gt;来普通指针的相关操作。同时，还提供了以下的接口:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- get()： To get the resource associated with the <span class="built_in">shared_ptr</span>.</span><br><span class="line">- reset()： To yield the ownership of the associated memory block. If <span class="keyword">this</span> is the last shared_ptrowning the resource, then the resource is released automatically.</span><br><span class="line">- unique: To know whether the resource is managed by only <span class="keyword">this</span> <span class="built_in">shared_ptr</span> instance.</span><br><span class="line">- <span class="keyword">operator</span> <span class="keyword">bool</span>: To check whether the <span class="built_in">shared_ptr</span> owns a memory block or not. Can be used with an <span class="keyword">if</span> condition.</span><br></pre></td></tr></table></figure>
<h4 id="Issue（问题）">Issue（问题）</h4><ul>
<li>当一个内存块与shared_ptr绑定相关，并且属于不同组时，将会发生错误。所有的shared_ptr共享一个组的同一个共享引用。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr1(<span class="keyword">new</span> <span class="keyword">int</span>);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr2 = sptr1;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr3;</span><br><span class="line">    sptr3 = sptr2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下表格给出了相应的引用计数 </p>
<p><img src="/images/cpp/sp4.jpg" alt=""></p>
<p>以上代码运行正常。<br>然而当使用以下代码时：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr1(p);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sptr2(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引用计数表如下： </p>
<p><img src="/images/cpp/sp5.jpg" alt=""></p>
<p>为了避免这种情况的发生，最好不用从裸指针中建立共享指针。</p>
<ul>
<li><p>另一个问题是，正如上述问题，如果从一个裸指针中创建一个共享指针，只有一个共享指针时，可以正常运行，但是当裸指针被释放时，共享指针也会crash。</p>
</li>
<li><p>循环引用时，如果资源被非恰当释放，也会出现问题。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B;</span><br><span class="line"><span class="keyword">class</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_sptrB(<span class="literal">nullptr</span>) &#123;&#125; ;</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A is destroyed"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;B&gt; m_sptrB;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() : m_sptrA(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">    ~B() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B is destroyed"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; m_sptrA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;B&gt; sptrB(<span class="keyword">new</span> B);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; sptrA(<span class="keyword">new</span> A);</span><br><span class="line">    sptrB-&gt;m_sptrA = sptrA;</span><br><span class="line">    sptrA-&gt;m_sptrB = sptrB;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当类A包含了指向B的共享指针，而类B包含了指向A的共享指针时，sptrA和sptrB相关的资源都将不会被释放。结果如下图： </p>
<p><img src="/images/cpp/sp6.jpg" alt=""></p>
<h4 id="2-3_weak_ptr">2.3 weak_ptr</h4><p>一个弱指针，提供的是一种共享语义定义而不是拥有语义定义。这就意味着一个弱指针可以通过shared_ptr共享资源。所以要创建弱指针，必须是已经拥有资源但是是一个共享指针。</p>
<p>一个弱指针并不允许诸如普通指针所提供的*和-&gt;。因为他并不是资源的拥有者。</p>
<h5 id="那么如何利用弱指针呢？">那么如何利用弱指针呢？</h5><p><strong>weak_ptr只能用于跟踪一个共享的资源，但并不实际拥有，也不会阻碍资源的释放。读取共享资源前需要先执行lock，得到shared_ptr后才能进行访问。<br>当两个对象需要互相引用时，我们总希望其中一个对象拥有另一个对象的强引用，而另一个对象拥有自己的弱引用，如果两个对象都是强引用，则容易引起循环引用，导致两个对象都无法正确释放。</strong></p>
<h5 id="用weak_ptr作为一个类似share_ptr但却能悬浮的指针">用weak_ptr作为一个类似share_ptr但却能悬浮的指针</h5><p>有一个矛盾，一个灵巧指针可以像shared_ptr 一样方便，但又不参与管理被指对象的所有权。换句话说，需要一个像shared_ptr但又不影响对象引用计数的指针。这类指针会有一个shared_ptr没有的问题：被指的对象有可能已经被销毁。一个良好的灵巧指针应该能处理这种情况，通过跟踪什么时候指针会悬浮，比如在被指对象不复存在的时候。这正是weak_ptr这类型灵巧指针所能做到的。</p>
<p>weak_ptr一般是通过shared_ptr来构造的。当使用shared_ptr来初始化weak_ptr时，weak_ptr就指向了相同的地方，但是不改变所指对象的引用计数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; sptr&lt;<span class="keyword">new</span> A&gt;</span><br><span class="line">    weak_ptr&lt;A&gt; wptr(sptr);</span><br><span class="line">    weak_ptr&lt;A&gt; wptr1 = wptr; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>weak_ptr创建引用情况 </p>
<p><img src="/images/cpp/sp7.jpg" alt=""></p>
<p>从上图可以看书，通过将一个weak_ptr赋值给另一个时会增加其弱引用计数。</p>
<p>如果弱引用指针所指向的资源，被其共享指针所释放时，这时候弱指针将会过期。如何检测一个弱指针是否指向一个合法的资源呢？有以下两种途径。</p>
<p>调用use_count()来得到引用计数。注意这里返回的是强引用计数。<br>调用expired()函数，这比调用use_count要快的多。<br>同时，我们可以通过对一个weak_ptr调用函数lock()来得到一个shared_ptr。或者直接对一个weak_ptr进行强制转换。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; sptr&lt;<span class="keyword">new</span> A&gt;</span><br><span class="line">    weak_ptr&lt;A&gt; wptr(sptr);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; sptr2 = wptr.lock(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;B&gt; sptrB(<span class="keyword">new</span> B);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; sptrA(<span class="keyword">new</span> A);</span><br><span class="line">    sptrB-&gt;m_sptrA = sptrA;</span><br><span class="line">    sptrA-&gt;m_sptrB = sptrB;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如上方法将增加强引用计数。</p>
<p>以下例子将展示如何使用weak_ptr解决循环引用的问题。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B;</span><br><span class="line"><span class="keyword">class</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_a(<span class="number">5</span>) &#123;&#125; ;</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A is destroyed"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintSpB</span><span class="params">()</span> </span>;</span><br><span class="line">    weak_ptr&lt;B&gt; m_sptrB;</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() : m_b(<span class="number">10</span>) &#123;&#125; ;</span><br><span class="line">    ~B() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B is destroyed"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    weak_ptr&lt;A&gt; m_sptrA;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::PrintSpB()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( !m_sptrB.expired() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m_sptrB.lock()-&gt;m_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;B&gt; sptrB(<span class="keyword">new</span> B);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; sptrA(<span class="keyword">new</span> A);</span><br><span class="line">    sptrB-&gt;m_sptrA = sptrA;</span><br><span class="line">    sptrA-&gt;m_sptrB = sptrB;</span><br><span class="line">    sptrA-&gt;PrintSpB();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-4_unique_ptr">2.4 unique_ptr</h4><p>unique_ptr几乎是易出错的auto_ptr的另一种形式。unique_ptr遵循专用所有权语义。在任何时刻，资源只被唯一的一个unique_ptr所占有。当auto_ptr不在作用域范围内时，资源就会被释放。当一个资源被其他资源重写时，如果先前的资源已经被释放，这保证了相关的资源也会被释放。</p>
<p>creation（创建）</p>
<p>unique_ptr创建的过程和shared_ptr创建的过程大同小异，所不同的是创建的数组形式的对象。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt; uptr(<span class="keyword">new</span> <span class="keyword">int</span>);</span><br></pre></td></tr></table></figure>
<p>unique_ptr提供了专用创建数组对象的析构调用delete[]而不是delete当其不在作用域范围内。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;<span class="keyword">int</span>[]&gt; uptr1(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]);</span><br></pre></td></tr></table></figure>
<p>对于资源的拥有权(ownership)可以从一个unique_ptr通过另一个进行赋值来传递。</p>
<p>需要记住的是：unique_ptr并不提供复制机制copy semantics（包括复制赋值copy assignment以及复制构造函数copy construction）而是一种移动机制。</p>
<p>Interface（接口）</p>
<p>unique_ptr提供的接口与普通常规指针的接口非常相似，但是并不提供指针运算。<br>unique_ptr提供release()函数来进行yield the ownership。release()和reset()函数的区别在于，reset()会对资源进行销毁。</p>
<p>参考文献：</p>
<p><a href="http://blog.csdn.net/coolmeme/article/details/43266319" target="_blank" rel="external">http://blog.csdn.net/coolmeme/article/details/43266319</a><br><a href="http://www.codeproject.com/Articles/541067/Cplusplus-Smart-Pointers" target="_blank" rel="external">http://www.codeproject.com/Articles/541067/Cplusplus-Smart-Pointers</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_传统指针存在的问题">1. 传统指针存在的问题</h3><hr>
<p>传统指针存在诸多的问题，比如指针所指向的对象的生命周期问题，挂起引用(dangling references)，以及内存泄露(memory leaks). 如下是一个传统指针的使用过程<]]>
    </summary>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开发者都应该使用的10个C++11特性]]></title>
    <link href="http://www.notehub.cn/2015/10/26/dev/CPP/cpp11/"/>
    <id>http://www.notehub.cn/2015/10/26/dev/CPP/cpp11/</id>
    <published>2015-10-26T12:19:56.000Z</published>
    <updated>2015-10-26T11:21:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="auto">auto</h3><hr>
<p>在C++11之前，auto关键字用来指定存储期。在新标准中，它的功能变为类型推断。auto现在成了一个类型的占位符，通知编译器去根据初始化代码推断所声明变量的真实类型。各种作用域内声明变量都可以用到它。例如，名空间中，程序块中，或是for循环的初始化语句中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">42</span>;        <span class="comment">// i is an int</span></span><br><span class="line"><span class="keyword">auto</span> l = <span class="number">42L</span>L;      <span class="comment">// l is an long long</span></span><br><span class="line"><span class="keyword">auto</span> p = <span class="keyword">new</span> foo(); <span class="comment">// p is a foo*</span></span><br></pre></td></tr></table></figure></p>
<p>使用auto通常意味着更短的代码（除非你所用类型是int，它会比auto少一个字母）。试想一下当你遍历STL容器时需要声明的那些迭代器（iterator）。现在不需要去声明那些typedef就可以得到简洁的代码了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = begin(<span class="built_in">map</span>); it != end(<span class="built_in">map</span>); ++it) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，auto不能用来声明函数的返回值。但如果函数有一个尾随的返回类型时，auto是可以出现在函数声明中返回值位置。这种情况下，auto并不是告诉编译器去推断返回类型，而是指引编译器去函数的末端寻找返回值类型。在下面这个例子中，函数的返回值类型就是operator+操作符作用在T1、T2类型变量上的返回值类型。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">compose</span><span class="params">(T1 t1, T2 t2)</span> -&gt; <span class="title">decltype</span><span class="params">(t1 + t2)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> t1+t2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> v = compose(<span class="number">2</span>, <span class="number">3.14</span>); <span class="comment">// v's type is double</span></span><br></pre></td></tr></table></figure></p>
<h3 id="nullptr">nullptr</h3><hr>
<p>以前都是用0来表示空指针的，但由于0可以被隐式类型转换为整形，这就会存在一些问题。关键字nullptr是std::nullptr_t类型的值，用来指代空指针。nullptr和任何指针类型以及类成员指针类型的空值之间可以发生隐式类型转换，同样也可以隐式转换为bool型（取值为false）。但是不存在到整形的隐式类型转换。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>* p)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">int</span>* p1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span>* p2 = <span class="literal">nullptr</span>;   </span><br><span class="line"><span class="keyword">if</span>(p1 == p2) &#123;&#125;</span><br><span class="line">foo(<span class="literal">nullptr</span>);</span><br><span class="line">bar(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">bool</span> f = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="literal">nullptr</span>; <span class="comment">// error: A native nullptr can only be converted to bool or, using reinterpret_cast, to an integral type</span></span><br></pre></td></tr></table></figure></p>
<p>为了向前兼容，0仍然是个合法的空指针值。</p>
<h3 id="Range-based_for_loops_（基于范围的for循环）">Range-based for loops （基于范围的for循环）</h3><hr>
<p>为了在遍历容器时支持”foreach”用法，C++11扩展了for语句的语法。用这个新的写法，可以遍历C类型的数组、初始化列表以及任何重载了非成员的begin()和end()函数的类型。如果你只是想对集合或数组的每个元素做一些操作，而不关心下标、迭代器位置或者元素个数，那么这种foreach的for循环将会非常有用。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">map</span>[<span class="string">"one"</span>] = v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; kvp : <span class="built_in">map</span>) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; kvp.first &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> v : kvp.second)</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; e : arr) </span><br><span class="line">&#123;</span><br><span class="line">  e = e*e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="override和final">override和final</h3><hr>
<p>我总觉得 C++中虚函数的设计很差劲，因为时至今日仍然没有一个强制的机制来标识虚函数会在派生类里被改写。vitual关键字是可选的，这使得阅读代码变得很费劲。因为可能需要追溯到继承体系的源头才能确定某个方法是否是虚函数。为了增加可读性，我总是在派生类里也写上virtual关键字，并且也鼓励大家都这么做。即使这样，仍然会产生一些微妙的错误。看下面这个例子：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">short</span>)</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f"</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f"</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>B::f 按理应当重写 A::f。然而二者的声明是不同的，一个参数是short，另一个是int。因此B::f只是拥有同样名字的另一个函数（重载）而不是重写。当你通过A类型的指针调用f()可能会期望打印出B::f，但实际上则会打出 f(int)而不是f(short) 。另一个很微妙的错误情况：参数相同，但是基类的函数是const的，派生类的函数却不是。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">const</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f "</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f"</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>同样，这两个函数是重载而不是重写。幸运的是，现在有一种方式能描述你的意图。新标准加入了两个新的标识符（不是关键字）</p>
<p>override，表示函数必须重写基类中的虚函数，如果派生类没有重写到将编译报错。</p>
<p>final，表示派生类不应当重写这个虚函数，如果派生类重写了基类的虚函数将编译报错。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">short</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f"</span> &lt;&lt; <span class="built_in">std</span>::endl; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span>)</span> final </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A::g"</span> &lt;&lt; <span class="built_in">std</span>::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">short</span>)</span>  override  </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B::f"</span> &lt;&lt; <span class="built_in">std</span>::endl; &#125;</span><br><span class="line">    <span class="comment">//virtual void g(int) &#123; std::cout &lt;&lt; "A::g" &lt;&lt; std::endl; &#125; // error C3248: “main::A::g”:  声明为“final”的函数无法被“main::B::g”重写</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">float</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A::g"</span> &lt;&lt; <span class="built_in">std</span>::endl; &#125; <span class="comment">// 重载</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Strongly-typed_enums_强类型枚举">Strongly-typed enums 强类型枚举</h3><hr>
<p>传统的C++枚举类型存在一些缺陷：它们会将枚举常量暴露在外层作用域中（这可能导致名字冲突，如果同一个作用域中存在两个不同的枚举类型，但是具有相同的枚举常量就会冲突），而且它们会被隐式转换为整形，无法拥有特定的用户定义类型。</p>
<p>在C++11中通过引入了一个称为强类型枚举的新类型，修正了这种情况。强类型枚举由关键字enum class标识。它不会将枚举常量暴露到外层作用域中，也不会隐式转换为整形，并且拥有用户指定的特定类型（传统枚举也增加了这个性质）。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> Options &#123;None, One, All&#125;;</span><br><span class="line">Options o = Options::All;</span><br></pre></td></tr></table></figure>
<h3 id="Smart_Pointers_智能指针">Smart Pointers 智能指针</h3><hr>
<p>已经有成千上万的文章讨论这个问题了，所以我只想说：现在能使用的，带引用计数，并且能自动释放内存的智能指针包括以下几种：</p>
<p>unique_ptr: 如果内存资源的所有权不需要共享，就应当使用这个（它没有拷贝构造函数），但是它可以转让给另一个unique_ptr（存在move构造函数）。</p>
<p>shared_ptr:  如果内存资源需要共享，那么使用这个（所以叫这个名字）。</p>
<p>weak_ptr: 持有被shared_ptr所管理对象的引用，但是不会改变引用计数值。它被用来打破依赖循环（想象在一个tree结构中，父节点通过一个共享所有权的引用(chared_ptr)引用子节点，同时子节点又必须持有父节点的引用。如果这第二个引用也共享所有权，就会导致一个循环，最终两个节点内存都无法释放）。</p>
<p>另一方面，auto_ptr已经被废弃，不会再使用了。</p>
<p>什么时候使用unique_ptr，什么时候使用shared_ptr取决于对所有权的需求，我建议阅读以下的讨论：<a href="http://stackoverflow.com/questions/15648844/using-smart-pointers-for-class-members" target="_blank" rel="external">http://stackoverflow.com/questions/15648844/using-smart-pointers-for-class-members</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::unique_ptr&lt;<span class="keyword">int</span>&gt; p1(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>));</span><br><span class="line"><span class="built_in">std</span>::unique_ptr&lt;<span class="keyword">int</span>&gt; p2 = <span class="built_in">std</span>::move(p1); <span class="comment">// 移交unique指针</span></span><br><span class="line"><span class="keyword">auto</span> sp = <span class="built_in">std</span>::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="built_in">std</span>::weak_ptr&lt;<span class="keyword">int</span>&gt; wp = sp;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> sp = wp.lock(); <span class="comment">// 提升shared_ptr</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *sp &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">&#125;</span><br><span class="line">sp.reset();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (wp.expired())</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"expired"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br></pre></td></tr></table></figure>
<p>如果你试图锁定(lock)一个过期（指被弱引用对象已经被释放）的weak_ptr，那你将获得一个空的shared_ptr.</p>
<h3 id="Lambdas">Lambdas</h3><hr>
<p>匿名函数（也叫lambda）已经加入到C++中，并很快异军突起。这个从函数式编程中借来的强大特性，使很多其他特性以及类库得以实现。你可以在任何使用函数对象或者函子(functor)或std::function的地方使用lambda。你可以从这里（<a href="http://msdn.microsoft.com/en-us/library/dd293603.aspx）找到语法说明。" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/dd293603.aspx）找到语法说明。</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">std</span>::for_each(<span class="built_in">std</span>::begin(v), <span class="built_in">std</span>::end(v), [](<span class="keyword">int</span> n) &#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">std</span>::endl;&#125;);</span><br><span class="line"><span class="keyword">auto</span> is_odd = [](<span class="keyword">int</span> n) &#123;<span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span>;&#125;;</span><br><span class="line"><span class="keyword">auto</span> pos = <span class="built_in">std</span>::find_if(<span class="built_in">std</span>::begin(v), <span class="built_in">std</span>::end(v), is_odd);</span><br><span class="line"><span class="keyword">if</span>(pos != <span class="built_in">std</span>::end(v))</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pos &lt;&lt; <span class="built_in">std</span>::endl;</span><br></pre></td></tr></table></figure>
<p>更复杂的是递归lambda。考虑一个实现Fibonacci函数的lambda。如果你试图用auto来声明，就会得到一个编译错误。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> fib = [&amp;fib](<span class="keyword">int</span> n) &#123;<span class="keyword">return</span> n &lt; <span class="number">2</span> ? <span class="number">1</span> : fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);&#125;;</span><br></pre></td></tr></table></figure>
<p>error C3533: ‘auto &amp;’: a parameter cannot have a type that contains ‘auto’<br>error C3531: ‘fib’: a symbol whose type contains ‘auto’ must have an initializer<br>error C3536: ‘fib’: cannot be used before it is initialized<br>error C2064: term does not evaluate to a function taking 1 arguments<br>问题出在auto意味着对象类型由初始表达式决定，然而初始表达式又包含了对其自身的引用，因此要求先知道它的类型，这就导致了无穷递归。解决问题的关键就是打破这种循环依赖，用std::function显式的指定函数类型：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; lfib = [&amp;lfib](<span class="keyword">int</span> n) &#123;<span class="keyword">return</span> n &lt; <span class="number">2</span> ? <span class="number">1</span> : lfib(n-<span class="number">1</span>) + lfib(n-<span class="number">2</span>);&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="非成员begin()和end()">非成员begin()和end()</h3><hr>
<p>也许你注意到了，我在前面的例子中已经用到了非成员begin()和end()函数。他们是新加入标准库的，除了能提高了代码一致性，还有助于更多地使用泛型编程。它们和所有的STL容器兼容。更重要的是，他们是可重载的。所以它们可以被扩展到支持任何类型。对C类型数组的重载已经包含在标准库中了。我们还用上一个例子中的代码来说明，在这个例子中我打印了一个数组然后查找它的第一个偶数元素。如果std::vector被替换成C类型数组。代码可能看起来是这样的：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::for_each(&amp;arr[<span class="number">0</span>], &amp;arr[<span class="number">0</span>]+<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), [](<span class="keyword">int</span> n) &#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">std</span>::endl;&#125;);</span><br><span class="line"><span class="keyword">auto</span> is_odd = [](<span class="keyword">int</span> n) &#123;<span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span>;&#125;;</span><br><span class="line"><span class="keyword">auto</span> begin = &amp;arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">auto</span> end = &amp;arr[<span class="number">0</span>]+<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">auto</span> pos = <span class="built_in">std</span>::find_if(begin, end, is_odd);</span><br><span class="line"><span class="keyword">if</span>(pos != end)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pos &lt;&lt; <span class="built_in">std</span>::endl;</span><br></pre></td></tr></table></figure>
<p>如果使用非成员的begin()和end()来实现，就会是以下这样的：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::for_each(<span class="built_in">std</span>::begin(arr), <span class="built_in">std</span>::end(arr), [](<span class="keyword">int</span> n) &#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">std</span>::endl;&#125;);</span><br><span class="line"><span class="keyword">auto</span> is_odd = [](<span class="keyword">int</span> n) &#123;<span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span>;&#125;;</span><br><span class="line"><span class="keyword">auto</span> pos = <span class="built_in">std</span>::find_if(<span class="built_in">std</span>::begin(arr), <span class="built_in">std</span>::end(arr), is_odd);</span><br><span class="line"><span class="keyword">if</span>(pos != <span class="built_in">std</span>::end(arr))</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pos &lt;&lt; <span class="built_in">std</span>::endl;</span><br></pre></td></tr></table></figure>
<p>这基本上和使用std::vecto的代码是完全一样的。这就意味着我们可以写一个泛型函数处理所有支持begin()和end()的类型。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(Iterator begin, Iterator end)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::for_each(begin, end, [](<span class="keyword">int</span> n) &#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">std</span>::endl;&#125;);</span><br><span class="line">    <span class="keyword">auto</span> is_odd = [](<span class="keyword">int</span> n) &#123;<span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span>;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> pos = <span class="built_in">std</span>::find_if(begin, end, is_odd);</span><br><span class="line">    <span class="keyword">if</span>(pos != end)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *pos &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(C c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    bar(<span class="built_in">std</span>::begin(c), <span class="built_in">std</span>::end(c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(T(&amp;arr)</span>[N])</span><br><span class="line"></span>&#123;</span><br><span class="line">    bar(<span class="built_in">std</span>::begin(arr), <span class="built_in">std</span>::end(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">foo(arr);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">foo(v);</span><br></pre></td></tr></table></figure>
<h3 id="static_assert和_type_traits">static_assert和 type traits</h3><hr>
<p>static_assert提供一个编译时的断言检查。如果断言为真，什么也不会发生。如果断言为假，编译器会打印一个特殊的错误信息。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">size_t</span> Size&gt;</span><br><span class="line"><span class="keyword">class</span> Vector</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">static_assert</span>(Size &lt; <span class="number">3</span>, <span class="string">"Size is too small"</span>);</span><br><span class="line">   T _points[Size];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   Vector&lt;<span class="keyword">int</span>, <span class="number">16</span>&gt; a1;</span><br><span class="line">   Vector&lt;<span class="keyword">double</span>, <span class="number">2</span>&gt; a2;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>error C2338: Size is too small<br>see reference to class template instantiation ‘Vector<t,size>‘ being compiled<br>   with<br>   [<br>      T=double,<br>      Size=2<br>   ]<br>static_assert和type traits一起使用能发挥更大的威力。type traits是一些class，在编译时提供关于类型的信息。在头文件<type_traits>中可以找到它们。这个头文件中有好几种class: helper class，用来产生编译时常量。type traits class，用来在编译时获取类型信息，还有就是type transformation class，他们可以将已存在的类型变换为新的类型。</type_traits></t,size></p>
<p>下面这段代码原本期望只做用于整数类型。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T1 t1, T2 t2)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t1 + t2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是如果有人写出如下代码，编译器并不会报错</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; add(<span class="number">1</span>, <span class="number">3.14</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; add(<span class="string">"one"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br></pre></td></tr></table></figure>
<p>程序会打印出4.14和”e”。但是如果我们加上编译时断言，那么以上两行将产生编译错误。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T1 t1, T2 t2)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">static_assert</span>(<span class="built_in">std</span>::is_integral&lt;T1&gt;::value, <span class="string">"Type T1 must be integral"</span>);</span><br><span class="line">   <span class="keyword">static_assert</span>(<span class="built_in">std</span>::is_integral&lt;T2&gt;::value, <span class="string">"Type T2 must be integral"</span>);</span><br><span class="line">   <span class="keyword">return</span> t1 + t2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>error C2338: Type T2 must be integral<br>see reference to function template instantiation ‘T2 add<int,double>(T1,T2)’ being compiled<br>   with<br>   [<br>      T2=double,<br>      T1=int<br>   ]<br>error C2338: Type T1 must be integral<br>see reference to function template instantiation ‘T1 add<const char*,int="">(T1,T2)’ being compiled<br>   with<br>   [<br>      T1=const char *,<br>      T2=int<br>   ]</const></int,double></p>
<h3 id="Move_semantics_（Move语义）">Move semantics （Move语义）</h3><hr>
<p>这是C++11中所涵盖的另一个重要话题。就这个话题可以写出一系列文章，仅用一个段落来说明显然是不够的。因此在这里我不会过多的深入细节，如果你还不是很熟悉这个话题，我鼓励你去阅读更多地资料。C++11加入了右值引用(value reference)的概念（用&amp;&amp;标识），用来区分对左值和右值的引用。左值就是一个有名字的对象，而右值则是一个无名对象（临时对象）。move语义允许修改右值（以前右值被看作是不可修改的，等同于const T&amp;类型）。C++的class或者struct以前都有一些隐含的成员函数：默认构造函数（仅当没有显示定义任何其他构造函数时才存在），拷贝构造函数，析构函数还有拷贝赋值操作符。拷贝构造函数和拷贝赋值操作符提供bit-wise的拷贝（浅拷贝），也就是逐个bit拷贝对象。也就是说，如果你有一个类包含指向其他对象的指针，拷贝时只会拷贝指针的值而不会管指向的对象。在某些情况下这种做法是没问题的，但在很多情况下，实际上你需要的是深拷贝，也就是说你希望拷贝指针所指向的对象。而不是拷贝指针的值。这种情况下，你需要显示地提供拷贝构造函数与拷贝赋值操作符来进行深拷贝。如果你用来初始化或拷贝的源对象是个右值（临时对象）会怎么样呢？你仍然需要拷贝它的值，但随后很快右值就会被释放。这意味着产生了额外的操作开销，包括原本并不需要的空间分配以及内存拷贝。现在说说move constructor和move assignment operator。这两个函数接收T&amp;&amp;类型的参数，也就是一个右值。在这种情况下，它们可以修改右值对象，例如“偷走”它们内部指针所指向的对象。举个例子，一个容器的实现（例如vector或者queue）可能包含一个指向元素数组的指针。当用一个临时对象初始化一个对象时，我们不需要分配另一个数组，从临时对象中把值复制过来，然后在临时对象析构时释放它的内存。我们只需要将指向数组内存的指针值复制过来，由此节约了一次内存分配，一次元数组的复制以及后来的内存释放。以下代码实现了一个简易的buffer。这个buffer有一个成员记录buffer名称（为了便于以下的说明），一个指针（封装在unique_ptr中）指向元素为T类型的数组，还有一个记录数组长度的变量。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> Buffer </span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">string</span>          _name;</span><br><span class="line">   <span class="keyword">size_t</span>               _size;</span><br><span class="line">   <span class="built_in">std</span>::unique_ptr&lt;T[]&gt; _buffer;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// default constructor</span></span><br><span class="line">   Buffer():</span><br><span class="line">      _size(<span class="number">16</span>),</span><br><span class="line">      _buffer(<span class="keyword">new</span> T[<span class="number">16</span>])</span><br><span class="line">   &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// constructor</span></span><br><span class="line">   Buffer(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="keyword">size_t</span> size):</span><br><span class="line">      _name(name),</span><br><span class="line">      _size(size),</span><br><span class="line">      _buffer(<span class="keyword">new</span> T[size])</span><br><span class="line">   &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// copy constructor</span></span><br><span class="line">   Buffer(<span class="keyword">const</span> Buffer&amp; copy):</span><br><span class="line">      _name(copy._name),</span><br><span class="line">      _size(copy._size),</span><br><span class="line">      _buffer(<span class="keyword">new</span> T[copy._size])</span><br><span class="line">   &#123;</span><br><span class="line">      T* source = copy._buffer.get();</span><br><span class="line">      T* dest = _buffer.get();</span><br><span class="line">      <span class="built_in">std</span>::copy(source, source + copy._size, dest);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// copy assignment operator</span></span><br><span class="line">   Buffer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Buffer&amp; copy)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span> != ©)</span><br><span class="line">      &#123;</span><br><span class="line">         _name = copy._name;</span><br><span class="line">  </span><br><span class="line">         <span class="keyword">if</span>(_size != copy._size)</span><br><span class="line">         &#123;</span><br><span class="line">            _buffer = <span class="literal">nullptr</span>;</span><br><span class="line">            _size = copy._size;</span><br><span class="line">            _buffer = _size &gt; <span class="number">0</span> &gt; <span class="keyword">new</span> T[_size] : <span class="literal">nullptr</span>;</span><br><span class="line">         &#125;</span><br><span class="line">  </span><br><span class="line">         T* source = copy._buffer.get();</span><br><span class="line">         T* dest = _buffer.get();</span><br><span class="line">         <span class="built_in">std</span>::copy(source, source + copy._size, dest);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// move constructor</span></span><br><span class="line">   Buffer(Buffer&amp;&amp; temp):</span><br><span class="line">      _name(<span class="built_in">std</span>::move(temp._name)),</span><br><span class="line">      _size(temp._size),</span><br><span class="line">      _buffer(<span class="built_in">std</span>::move(temp._buffer))</span><br><span class="line">   &#123;</span><br><span class="line">      temp._buffer = <span class="literal">nullptr</span>;</span><br><span class="line">      temp._size = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// move assignment operator</span></span><br><span class="line">   Buffer&amp; <span class="keyword">operator</span>=(Buffer&amp;&amp; temp)</span><br><span class="line">   &#123;</span><br><span class="line">      assert(<span class="keyword">this</span> != &amp;temp); <span class="comment">// assert if this is not a temporary</span></span><br><span class="line">  </span><br><span class="line">      _buffer = <span class="literal">nullptr</span>;</span><br><span class="line">      _size = temp._size;</span><br><span class="line">      _buffer = <span class="built_in">std</span>::move(temp._buffer);</span><br><span class="line">  </span><br><span class="line">      _name = <span class="built_in">std</span>::move(temp._name);</span><br><span class="line">  </span><br><span class="line">      temp._buffer = <span class="literal">nullptr</span>;</span><br><span class="line">      temp._size = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Buffer&lt;T&gt; getBuffer(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name) </span><br><span class="line">&#123;</span><br><span class="line">   Buffer&lt;T&gt; b(name, <span class="number">128</span>);</span><br><span class="line">   <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   Buffer&lt;<span class="keyword">int</span>&gt; b1;</span><br><span class="line">   Buffer&lt;<span class="keyword">int</span>&gt; b2(<span class="string">"buf2"</span>, <span class="number">64</span>);</span><br><span class="line">   Buffer&lt;<span class="keyword">int</span>&gt; b3 = b2;</span><br><span class="line">   Buffer&lt;<span class="keyword">int</span>&gt; b4 = getBuffer&lt;<span class="keyword">int</span>&gt;(<span class="string">"buf4"</span>);</span><br><span class="line">   b1 = getBuffer&lt;<span class="keyword">int</span>&gt;(<span class="string">"buf5"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认的copy constructor以及copy assignment operator大家应该很熟悉了。C++11中新增的是move constructor以及move assignment operator，这两个函数根据上文所描述的move语义实现。如果你运行这段代码，你就会发现b4构造时，move constructor会被调用。同样，对b1赋值时，move assignment operator会被调用。原因就在于getBuffer()的返回值是一个临时对象——也就是右值。你也许注意到了，move constuctor中当我们初始化变量name和指向buffer的指针时，我们使用了std::move。name实际上是一个string，std::string实现了move语义。std::unique_ptr也一样。但是如果我们写_name(temp._name)，那么copy constructor将会被调用。不过对于_buffer来说不能这么写，因为std::unique_ptr没有copy constructor。但为什么std::string的move constructor此时没有被调到呢？这是因为虽然我们使用一个右值调用了Buffer的move constructor，但在这个构造函数内，它实际上是个左值。为什么？因为它是有名字的——“temp”。一个有名字的对象就是左值。为了再把它变为右值（以便调用move constructor)必须使用std::move。这个函数仅仅是把一个左值引用变为一个右值引用。更新：虽然这个例子是为了说明如何实现move constructor以及move assignment operator，但具体的实现方式并不是唯一的。某同学提供了另一种可能的实现。为了方便查看，我把它也列在下面：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> Buffer</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">string</span>          _name;</span><br><span class="line">   <span class="keyword">size_t</span>               _size;</span><br><span class="line">   <span class="built_in">std</span>::unique_ptr&lt;T[]&gt; _buffer;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// constructor</span></span><br><span class="line">   Buffer(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name = <span class="string">""</span>, <span class="keyword">size_t</span> size = <span class="number">16</span>):</span><br><span class="line">      _name(name),</span><br><span class="line">      _size(size),</span><br><span class="line">      _buffer(size? <span class="keyword">new</span> T[size] : <span class="literal">nullptr</span>)</span><br><span class="line">   &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// copy constructor</span></span><br><span class="line">   Buffer(<span class="keyword">const</span> Buffer&amp; copy):</span><br><span class="line">      _name(copy._name),</span><br><span class="line">      _size(copy._size),</span><br><span class="line">      _buffer(copy._size? <span class="keyword">new</span> T[copy._size] : <span class="literal">nullptr</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      T* source = copy._buffer.get();</span><br><span class="line">      T* dest = _buffer.get();</span><br><span class="line">      <span class="built_in">std</span>::copy(source, source + copy._size, dest);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// copy assignment operator</span></span><br><span class="line">   Buffer&amp; <span class="keyword">operator</span>=(Buffer copy)</span><br><span class="line">   &#123;</span><br><span class="line">       swap(*<span class="keyword">this</span>, copy);</span><br><span class="line">       <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// move constructor</span></span><br><span class="line">   Buffer(Buffer&amp;&amp; temp):Buffer()</span><br><span class="line">   &#123;</span><br><span class="line">      swap(*<span class="keyword">this</span>, temp);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Buffer&amp; first, Buffer&amp; second)</span> <span class="keyword">noexcept</span></span><br><span class="line">   </span>&#123;</span><br><span class="line">       <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">       swap(first._name  , second._name);</span><br><span class="line">       swap(first._size  , second._size);</span><br><span class="line">       swap(first._buffer, second._buffer);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="auto">auto</h3><hr>
<p>在C++11之前，auto关键字用来指定存储期。在新标准中，它的功能变为类型推断。auto现在成了一个类型的占位符，通知编译器去根据初始化代码推断所声明变量的真实类型。各种作用域内声明变量都可以用到它。例如，名空间中，]]>
    </summary>
    
      <category term="c++" scheme="http://www.notehub.cn/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个故事讲清楚 NIO]]></title>
    <link href="http://www.notehub.cn/2015/10/26/dev/about_nio/"/>
    <id>http://www.notehub.cn/2015/10/26/dev/about_nio/</id>
    <published>2015-10-26T08:19:56.000Z</published>
    <updated>2015-10-26T08:56:33.000Z</updated>
    <content type="html"><![CDATA[<p>假设某银行只有10个职员, 该银行的业务流程分为以下4个步骤：</p>
<p>1） 顾客填申请表（5分钟）；<br>2） 职员审核（1分钟）；<br>3） 职员叫保安去金库取钱（3分钟）；<br>4） 职员打印票据，并将钱和票据返回给顾客（1分钟）。<br>我们看看银行不同的工作方式对其工作效率到底有何影响。</p>
<h3 id="1_BIO方式">1 BIO方式</h3><p>每来一个顾客，马上由一位职员来接待处理，并且这个职员需要负责以上4个完整流程。当超过10个顾客时，剩余的顾客需要排队等候。</p>
<p>我们算算这个银行一个小时到底能处理多少顾客？一个职员处理一个顾客需要10分钟（5+1+3+1）时间，一个小时（60分钟）能处理6个顾客，一共10个职员，那就是只能处理60个顾客。</p>
<p>可以看到银行职员的工作状态并不饱和，比如在第1步，其实是处于等待中。</p>
<p>这种工作其实就是BIO，每次来一个请求（顾客），就分配到线程池中由一个线程（职员）处理，如果超出了线程池的最大上限（10个），就扔到队列等待 。</p>
<h3 id="2_NIO方式">2 NIO方式</h3><p>如何提高银行的吞吐量呢？</p>
<p>思路：分而治之，将任务拆分开来，由专门的人负责专门的任务。</p>
<p>具体来讲，银行专门指派一名职员A，A的工作就是每当有顾客到银行，他就递上表格让顾客填写，每当有顾客填好表后，A就将其随机指派给剩余的9名职员完成后续步骤。</p>
<p>我们计算下这种工作方式下银行一个小时到底能处理多少顾客？</p>
<p>假设顾客非常多，职员A的工作处于饱和中，他不断的将填好表的顾客带到柜台处理，柜台一个职员5分钟能处理完一个顾客，一个小时9名职员能处理：9*（60/5）=108。</p>
<p>可见工作方式的转变能带来效率的极大提升。</p>
<p>这种工作方式其实就NIO的思路。下图是非常经典的NIO说明图，mainReactor线程负责监听server socket，accept新连接，并将建立的socket分派给subReactor；subReactor可以是一个线程，也可以是线程池（一般可以设置为CPU核数），负责多路分离已连接的socket，读写网络数据，这里的读写网络数据可类比顾客填表这一耗时动作，对具体的业务处理功能，其扔给worker线程池完成。</p>
<p>可以看到典型NIO有三类线程，分别是mainReactor线程、subReactor线程、work线程。不同的线程干专业的事情，最终每个线程都没空着，系统的吞吐量自然就上去了。</p>
<h3 id="3_异步方式">3 异步方式</h3><p>第二种工作方式有没有什么可以提高的地方呢？</p>
<p>仔细查看可发现第3步骤这3分钟柜台职员是在等待中度过的，那怎么能让柜台职员保持满负荷呢？</p>
<p>还是分而治之的思路，指派1个职员B来专门负责第3步骤。每当柜台员工完成第2步时，就通知职员B来负责与保安沟通取钱。这时候柜台员工可以继续处理下一个顾客。当职员B拿到钱之后，他会怎么办呢？他会通知顾客钱已经到柜台了，让顾客重新排队处理，当柜台职员再次服务该顾客时，发现该顾客前3步已经完成，直接执行第4步即可。</p>
<p>我们可以算算通过这种方法，银行的吞吐量能提高到多少。</p>
<p>假设职员B的工作非常饱和，柜台一个职员现在2分钟能处理完一个顾客，一个小时8名职员能处理：8*（60/2）=240。</p>
<p>在当今web服务中，经常需要通过RPC或者Http等方式调用第三方服务，这里对应的就是第3步，如果这步耗时较长，通过异步方式将能极大降低资源使用率。</p>
<p>jetty Continuations 就实现了上述异步方式，有兴趣的同学可以去尝试下（<a href="http://wiki.eclipse.org/Jetty/Feature/Continuations）。" target="_blank" rel="external">http://wiki.eclipse.org/Jetty/Feature/Continuations）。</a></p>
<p>NIO+异步的方式能让少量的线程（资源）做大量的事情，这适用于很多应用场景，比如代理服务、api服务、长连接服务等等，这些应用如果用同步方式将耗费大量机器资源。尽管NIO+异步能提高系统吞吐量，但其并不能让一个请求的等待时间下降，相反可能会增加等待时间。</p>
<h3 id="4_小结">4 小结</h3><p>总结就一句：“分而治之，将任务拆分开来，由专门的人负责专门的任务”，这不仅在计算机领域生效，在整个社会领域都生效。</p>
<p>src: <a href="http://blog.jobbole.com/88984/" target="_blank" rel="external">http://blog.jobbole.com/88984/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>假设某银行只有10个职员, 该银行的业务流程分为以下4个步骤：</p>
<p>1） 顾客填申请表（5分钟）；<br>2） 职员审核（1分钟）；<br>3） 职员叫保安去金库取钱（3分钟）；<br>4） 职员打印票据，并将钱和票据返回给顾客（1分钟）。<br>我们看看银行不同]]>
    </summary>
    
      <category term="nio" scheme="http://www.notehub.cn/tags/nio/"/>
    
      <category term="dev" scheme="http://www.notehub.cn/categories/dev/"/>
    
  </entry>
  
</feed>
